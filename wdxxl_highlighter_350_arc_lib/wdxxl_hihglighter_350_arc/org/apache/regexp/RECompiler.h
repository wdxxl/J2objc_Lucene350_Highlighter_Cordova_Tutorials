//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/RECompiler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheRegexpRECompiler")
#ifdef RESTRICT_OrgApacheRegexpRECompiler
#define INCLUDE_ALL_OrgApacheRegexpRECompiler 0
#else
#define INCLUDE_ALL_OrgApacheRegexpRECompiler 1
#endif
#undef RESTRICT_OrgApacheRegexpRECompiler

#if !defined (OrgApacheRegexpRECompiler_) && (INCLUDE_ALL_OrgApacheRegexpRECompiler || defined(INCLUDE_OrgApacheRegexpRECompiler))
#define OrgApacheRegexpRECompiler_

@class IOSCharArray;
@class IOSIntArray;
@class JavaUtilHashtable;
@class OrgApacheRegexpREProgram;

@interface OrgApacheRegexpRECompiler : NSObject {
 @public
  IOSCharArray *instruction_;
  jint lenInstruction_;
  NSString *pattern_;
  jint len_;
  jint idx_;
  jint parens_;
  jint maxBrackets_;
  jint brackets_;
  IOSIntArray *bracketStart_;
  IOSIntArray *bracketEnd_;
  IOSIntArray *bracketMin_;
  IOSIntArray *bracketOpt_;
}

#pragma mark Public

- (instancetype)init;

- (OrgApacheRegexpREProgram *)compileWithNSString:(NSString *)pattern;

#pragma mark Package-Private

- (void)allocBrackets OBJC_METHOD_FAMILY_NONE;

- (jint)atom;

- (void)bracket;

- (jint)branchWithIntArray:(IOSIntArray *)flags;

- (jint)characterClass;

- (jint)closureWithIntArray:(IOSIntArray *)flags;

- (void)emitWithChar:(jchar)c;

- (void)ensureWithInt:(jint)n;

- (jint)escape;

- (jint)exprWithIntArray:(IOSIntArray *)flags;

- (void)internalError;

- (jint)nodeWithChar:(jchar)opcode
             withInt:(jint)opdata;

- (void)nodeInsertWithChar:(jchar)opcode
                   withInt:(jint)opdata
                   withInt:(jint)insertAt;

- (void)reallocBrackets;

- (void)setNextOfEndWithInt:(jint)node
                    withInt:(jint)pointTo;

- (void)syntaxErrorWithNSString:(NSString *)s;

- (jint)terminalWithIntArray:(IOSIntArray *)flags;

@end

J2OBJC_STATIC_INIT(OrgApacheRegexpRECompiler)

J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler, instruction_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler, bracketStart_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler, bracketEnd_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler, bracketMin_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler, bracketOpt_, IOSIntArray *)

inline jint OrgApacheRegexpRECompiler_get_NODE_NORMAL();
#define OrgApacheRegexpRECompiler_NODE_NORMAL 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, NODE_NORMAL, jint)

inline jint OrgApacheRegexpRECompiler_get_NODE_NULLABLE();
#define OrgApacheRegexpRECompiler_NODE_NULLABLE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, NODE_NULLABLE, jint)

inline jint OrgApacheRegexpRECompiler_get_NODE_TOPLEVEL();
#define OrgApacheRegexpRECompiler_NODE_TOPLEVEL 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, NODE_TOPLEVEL, jint)

inline jint OrgApacheRegexpRECompiler_get_ESC_MASK();
#define OrgApacheRegexpRECompiler_ESC_MASK 1048560
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, ESC_MASK, jint)

inline jint OrgApacheRegexpRECompiler_get_ESC_BACKREF();
#define OrgApacheRegexpRECompiler_ESC_BACKREF 1048575
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, ESC_BACKREF, jint)

inline jint OrgApacheRegexpRECompiler_get_ESC_COMPLEX();
#define OrgApacheRegexpRECompiler_ESC_COMPLEX 1048574
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, ESC_COMPLEX, jint)

inline jint OrgApacheRegexpRECompiler_get_ESC_CLASS();
#define OrgApacheRegexpRECompiler_ESC_CLASS 1048573
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, ESC_CLASS, jint)

inline jint OrgApacheRegexpRECompiler_get_bracketUnbounded();
#define OrgApacheRegexpRECompiler_bracketUnbounded -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheRegexpRECompiler, bracketUnbounded, jint)

inline JavaUtilHashtable *OrgApacheRegexpRECompiler_get_hashPOSIX();
inline JavaUtilHashtable *OrgApacheRegexpRECompiler_set_hashPOSIX(JavaUtilHashtable *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *OrgApacheRegexpRECompiler_hashPOSIX;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheRegexpRECompiler, hashPOSIX, JavaUtilHashtable *)

FOUNDATION_EXPORT void OrgApacheRegexpRECompiler_init(OrgApacheRegexpRECompiler *self);

FOUNDATION_EXPORT OrgApacheRegexpRECompiler *new_OrgApacheRegexpRECompiler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheRegexpRECompiler *create_OrgApacheRegexpRECompiler_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheRegexpRECompiler)

#endif

#if !defined (OrgApacheRegexpRECompiler_RERange_) && (INCLUDE_ALL_OrgApacheRegexpRECompiler || defined(INCLUDE_OrgApacheRegexpRECompiler_RERange))
#define OrgApacheRegexpRECompiler_RERange_

@class IOSIntArray;
@class OrgApacheRegexpRECompiler;

@interface OrgApacheRegexpRECompiler_RERange : NSObject {
 @public
  jint size_;
  IOSIntArray *minRange_;
  IOSIntArray *maxRange_;
  jint num_;
}

#pragma mark Package-Private

- (instancetype)initWithOrgApacheRegexpRECompiler:(OrgApacheRegexpRECompiler *)outer$;

- (void)delete__WithInt:(jint)index;

- (void)includeWithChar:(jchar)minmax
            withBoolean:(jboolean)include;

- (void)includeWithInt:(jint)min
               withInt:(jint)max
           withBoolean:(jboolean)include;

- (void)mergeWithInt:(jint)min
             withInt:(jint)max;

- (void)removeWithInt:(jint)min
              withInt:(jint)max;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheRegexpRECompiler_RERange)

J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler_RERange, minRange_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRECompiler_RERange, maxRange_, IOSIntArray *)

FOUNDATION_EXPORT void OrgApacheRegexpRECompiler_RERange_initWithOrgApacheRegexpRECompiler_(OrgApacheRegexpRECompiler_RERange *self, OrgApacheRegexpRECompiler *outer$);

FOUNDATION_EXPORT OrgApacheRegexpRECompiler_RERange *new_OrgApacheRegexpRECompiler_RERange_initWithOrgApacheRegexpRECompiler_(OrgApacheRegexpRECompiler *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheRegexpRECompiler_RERange *create_OrgApacheRegexpRECompiler_RERange_initWithOrgApacheRegexpRECompiler_(OrgApacheRegexpRECompiler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheRegexpRECompiler_RERange)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheRegexpRECompiler")
