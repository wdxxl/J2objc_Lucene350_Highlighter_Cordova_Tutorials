//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/StreamCharacterIterator.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "org/apache/regexp/StreamCharacterIterator.h"

@interface OrgApacheRegexpStreamCharacterIterator () {
 @public
  JavaIoInputStream *is_;
  JavaLangStringBuffer *buff_;
  jboolean closed_;
}

- (jint)readWithInt:(jint)n;

- (void)readAll;

- (void)ensureWithInt:(jint)idx;

@end

J2OBJC_FIELD_SETTER(OrgApacheRegexpStreamCharacterIterator, is_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpStreamCharacterIterator, buff_, JavaLangStringBuffer *)

__attribute__((unused)) static jint OrgApacheRegexpStreamCharacterIterator_readWithInt_(OrgApacheRegexpStreamCharacterIterator *self, jint n);

__attribute__((unused)) static void OrgApacheRegexpStreamCharacterIterator_readAll(OrgApacheRegexpStreamCharacterIterator *self);

__attribute__((unused)) static void OrgApacheRegexpStreamCharacterIterator_ensureWithInt_(OrgApacheRegexpStreamCharacterIterator *self, jint idx);

@implementation OrgApacheRegexpStreamCharacterIterator

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  OrgApacheRegexpStreamCharacterIterator_initWithJavaIoInputStream_(self, is);
  return self;
}

- (NSString *)substringWithInt:(jint)beginIndex
                       withInt:(jint)endIndex {
  @try {
    OrgApacheRegexpStreamCharacterIterator_ensureWithInt_(self, endIndex);
    return [((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(buff_)) description])) java_substring:beginIndex endIndex:endIndex];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
  }
}

- (NSString *)substringWithInt:(jint)beginIndex {
  @try {
    OrgApacheRegexpStreamCharacterIterator_readAll(self);
    return [((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(buff_)) description])) java_substring:beginIndex];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
  }
}

- (jchar)charAtWithInt:(jint)pos {
  @try {
    OrgApacheRegexpStreamCharacterIterator_ensureWithInt_(self, pos);
    return [((JavaLangStringBuffer *) nil_chk(buff_)) charAtWithInt:pos];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
  }
}

- (jboolean)isEndWithInt:(jint)pos {
  if ([((JavaLangStringBuffer *) nil_chk(buff_)) java_length] > pos) {
    return false;
  }
  else {
    @try {
      OrgApacheRegexpStreamCharacterIterator_ensureWithInt_(self, pos);
      return ([buff_ java_length] <= pos);
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
    }
  }
}

- (jint)readWithInt:(jint)n {
  return OrgApacheRegexpStreamCharacterIterator_readWithInt_(self, n);
}

- (void)readAll {
  OrgApacheRegexpStreamCharacterIterator_readAll(self);
}

- (void)ensureWithInt:(jint)idx {
  OrgApacheRegexpStreamCharacterIterator_ensureWithInt_(self, idx);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 3, 7, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 3, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(substringWithInt:withInt:);
  methods[2].selector = @selector(substringWithInt:);
  methods[3].selector = @selector(charAtWithInt:);
  methods[4].selector = @selector(isEndWithInt:);
  methods[5].selector = @selector(readWithInt:);
  methods[6].selector = @selector(readAll);
  methods[7].selector = @selector(ensureWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "is_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buff_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "substring", "II", "I", "charAt", "isEnd", "read", "LJavaIoIOException;", "ensure" };
  static const J2ObjcClassInfo _OrgApacheRegexpStreamCharacterIterator = { "StreamCharacterIterator", "org.apache.regexp", ptrTable, methods, fields, 7, 0x11, 8, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpStreamCharacterIterator;
}

@end

void OrgApacheRegexpStreamCharacterIterator_initWithJavaIoInputStream_(OrgApacheRegexpStreamCharacterIterator *self, JavaIoInputStream *is) {
  NSObject_init(self);
  self->is_ = is;
  self->buff_ = new_JavaLangStringBuffer_initWithInt_(512);
  self->closed_ = false;
}

OrgApacheRegexpStreamCharacterIterator *new_OrgApacheRegexpStreamCharacterIterator_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpStreamCharacterIterator, initWithJavaIoInputStream_, is)
}

OrgApacheRegexpStreamCharacterIterator *create_OrgApacheRegexpStreamCharacterIterator_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpStreamCharacterIterator, initWithJavaIoInputStream_, is)
}

jint OrgApacheRegexpStreamCharacterIterator_readWithInt_(OrgApacheRegexpStreamCharacterIterator *self, jint n) {
  if (self->closed_) {
    return 0;
  }
  jint c;
  jint i = n;
  while (--i >= 0) {
    c = [((JavaIoInputStream *) nil_chk(self->is_)) read];
    if (c < 0) {
      self->closed_ = true;
      break;
    }
    (void) [((JavaLangStringBuffer *) nil_chk(self->buff_)) appendWithChar:(jchar) c];
  }
  return n - i;
}

void OrgApacheRegexpStreamCharacterIterator_readAll(OrgApacheRegexpStreamCharacterIterator *self) {
  while (!self->closed_) {
    OrgApacheRegexpStreamCharacterIterator_readWithInt_(self, 1000);
  }
}

void OrgApacheRegexpStreamCharacterIterator_ensureWithInt_(OrgApacheRegexpStreamCharacterIterator *self, jint idx) {
  if (self->closed_) {
    return;
  }
  if (idx < [((JavaLangStringBuffer *) nil_chk(self->buff_)) java_length]) {
    return;
  }
  OrgApacheRegexpStreamCharacterIterator_readWithInt_(self, idx + 1 - [self->buff_ java_length]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpStreamCharacterIterator)
