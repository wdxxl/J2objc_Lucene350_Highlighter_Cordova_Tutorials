//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/REDebugCompiler.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Integer.h"
#include "java/util/Hashtable.h"
#include "org/apache/regexp/RE.h"
#include "org/apache/regexp/RECompiler.h"
#include "org/apache/regexp/REDebugCompiler.h"

J2OBJC_INITIALIZED_DEFN(OrgApacheRegexpREDebugCompiler)

JavaUtilHashtable *OrgApacheRegexpREDebugCompiler_hashOpcode;

@implementation OrgApacheRegexpREDebugCompiler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheRegexpREDebugCompiler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)opcodeToStringWithChar:(jchar)opcode {
  NSString *ret = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) getWithId:new_JavaLangInteger_initWithInt_(opcode)], [NSString class]);
  if (ret == nil) {
    ret = @"OP_????";
  }
  return ret;
}

- (NSString *)charToStringWithChar:(jchar)c {
  if (c < ' ' || c > 127) {
    return JreStrcat("CI", '\\', (jint) c);
  }
  return NSString_java_valueOfChar_(c);
}

- (NSString *)nodeToStringWithInt:(jint)node {
  jchar opcode = IOSCharArray_Get(nil_chk(instruction_), node + OrgApacheRegexpRE_offsetOpcode);
  jint opdata = (jint) IOSCharArray_Get(instruction_, node + OrgApacheRegexpRE_offsetOpdata);
  return JreStrcat("$$I", [self opcodeToStringWithChar:opcode], @", opdata = ", opdata);
}

- (void)dumpProgramWithJavaIoPrintWriter:(JavaIoPrintWriter *)p {
  for (jint i = 0; i < lenInstruction_; ) {
    jchar opcode = IOSCharArray_Get(nil_chk(instruction_), i + OrgApacheRegexpRE_offsetOpcode);
    jchar opdata = IOSCharArray_Get(instruction_, i + OrgApacheRegexpRE_offsetOpdata);
    jshort next = (jshort) IOSCharArray_Get(instruction_, i + OrgApacheRegexpRE_offsetNext);
    [((JavaIoPrintWriter *) nil_chk(p)) printWithNSString:JreStrcat("I$$$", i, @". ", [self nodeToStringWithInt:i], @", next = ")];
    if (next == 0) {
      [p printWithNSString:@"none"];
    }
    else {
      [p printWithInt:i + next];
    }
    i += OrgApacheRegexpRE_nodeSize;
    if (opcode == OrgApacheRegexpRE_OP_ANYOF) {
      [p printWithNSString:@", ["];
      jint rangeCount = opdata;
      for (jint r = 0; r < rangeCount; r++) {
        jchar charFirst = IOSCharArray_Get(nil_chk(instruction_), i++);
        jchar charLast = IOSCharArray_Get(instruction_, i++);
        if (charFirst == charLast) {
          [p printWithNSString:[self charToStringWithChar:charFirst]];
        }
        else {
          [p printWithNSString:JreStrcat("$C$", [self charToStringWithChar:charFirst], '-', [self charToStringWithChar:charLast])];
        }
      }
      [p printWithNSString:@"]"];
    }
    if (opcode == OrgApacheRegexpRE_OP_ATOM) {
      [p printWithNSString:@", \""];
      for (jint len = opdata; len-- != 0; ) {
        [p printWithNSString:[self charToStringWithChar:IOSCharArray_Get(nil_chk(instruction_), i++)]];
      }
      [p printWithNSString:@"\""];
    }
    [p printlnWithNSString:@""];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(opcodeToStringWithChar:);
  methods[2].selector = @selector(charToStringWithChar:);
  methods[3].selector = @selector(nodeToStringWithInt:);
  methods[4].selector = @selector(dumpProgramWithJavaIoPrintWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hashOpcode", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x8, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "opcodeToString", "C", "charToString", "nodeToString", "I", "dumpProgram", "LJavaIoPrintWriter;", &OrgApacheRegexpREDebugCompiler_hashOpcode };
  static const J2ObjcClassInfo _OrgApacheRegexpREDebugCompiler = { "REDebugCompiler", "org.apache.regexp", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpREDebugCompiler;
}

+ (void)initialize {
  if (self == [OrgApacheRegexpREDebugCompiler class]) {
    OrgApacheRegexpREDebugCompiler_hashOpcode = new_JavaUtilHashtable_init();
    {
      (void) [OrgApacheRegexpREDebugCompiler_hashOpcode putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_RELUCTANTSTAR) withId:@"OP_RELUCTANTSTAR"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_RELUCTANTPLUS) withId:@"OP_RELUCTANTPLUS"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_RELUCTANTMAYBE) withId:@"OP_RELUCTANTMAYBE"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_END) withId:@"OP_END"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_BOL) withId:@"OP_BOL"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_EOL) withId:@"OP_EOL"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_ANY) withId:@"OP_ANY"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_ANYOF) withId:@"OP_ANYOF"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_BRANCH) withId:@"OP_BRANCH"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_ATOM) withId:@"OP_ATOM"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_STAR) withId:@"OP_STAR"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_PLUS) withId:@"OP_PLUS"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_MAYBE) withId:@"OP_MAYBE"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_NOTHING) withId:@"OP_NOTHING"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_GOTO) withId:@"OP_GOTO"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_ESCAPE) withId:@"OP_ESCAPE"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_OPEN) withId:@"OP_OPEN"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_CLOSE) withId:@"OP_CLOSE"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_BACKREF) withId:@"OP_BACKREF"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_POSIXCLASS) withId:@"OP_POSIXCLASS"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_OPEN_CLUSTER) withId:@"OP_OPEN_CLUSTER"];
      (void) [((JavaUtilHashtable *) nil_chk(OrgApacheRegexpREDebugCompiler_hashOpcode)) putWithId:new_JavaLangInteger_initWithInt_(OrgApacheRegexpRE_OP_CLOSE_CLUSTER) withId:@"OP_CLOSE_CLUSTER"];
    }
    J2OBJC_SET_INITIALIZED(OrgApacheRegexpREDebugCompiler)
  }
}

@end

void OrgApacheRegexpREDebugCompiler_init(OrgApacheRegexpREDebugCompiler *self) {
  OrgApacheRegexpRECompiler_init(self);
}

OrgApacheRegexpREDebugCompiler *new_OrgApacheRegexpREDebugCompiler_init() {
  J2OBJC_NEW_IMPL(OrgApacheRegexpREDebugCompiler, init)
}

OrgApacheRegexpREDebugCompiler *create_OrgApacheRegexpREDebugCompiler_init() {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpREDebugCompiler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpREDebugCompiler)
