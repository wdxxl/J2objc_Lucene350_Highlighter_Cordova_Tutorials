//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.h"

@implementation OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder

- (instancetype)initWithInt:(jint)margin {
  OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_initWithInt_(self, margin);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneSearchVectorhighlightFieldFragList *)createFieldFragListWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList:(OrgApacheLuceneSearchVectorhighlightFieldPhraseList *)fieldPhraseList
                                                                                                                          withInt:(jint)fragCharSize {
  if (fragCharSize < minFragCharSize_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"fragCharSize(", fragCharSize, @") is too small. It must be ", minFragCharSize_, @" or higher."));
  OrgApacheLuceneSearchVectorhighlightFieldFragList *ffl = new_OrgApacheLuceneSearchVectorhighlightFieldFragList_initWithInt_(fragCharSize);
  id<JavaUtilList> wpil = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> ite = [((JavaUtilLinkedList *) nil_chk(((OrgApacheLuceneSearchVectorhighlightFieldPhraseList *) nil_chk(fieldPhraseList))->phraseList_)) iterator];
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *phraseInfo = nil;
  jint startOffset = 0;
  jboolean taken = false;
  while (true) {
    if (!taken) {
      if (![((id<JavaUtilIterator>) nil_chk(ite)) hasNext]) break;
      phraseInfo = [ite next];
    }
    taken = false;
    if (phraseInfo == nil) break;
    if ([phraseInfo getStartOffset] < startOffset) continue;
    [wpil clear];
    [wpil addWithId:phraseInfo];
    jint st = [phraseInfo getStartOffset] - margin_ < startOffset ? startOffset : [phraseInfo getStartOffset] - margin_;
    jint en = st + fragCharSize;
    if ([phraseInfo getEndOffset] > en) en = [phraseInfo getEndOffset];
    startOffset = en;
    while (true) {
      if ([((id<JavaUtilIterator>) nil_chk(ite)) hasNext]) {
        phraseInfo = [ite next];
        taken = true;
        if (phraseInfo == nil) break;
      }
      else break;
      if ([phraseInfo getEndOffset] <= en) [wpil addWithId:phraseInfo];
      else break;
    }
    [ffl addWithInt:st withInt:en withJavaUtilList:wpil];
  }
  return ffl;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldFragList;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(createFieldFragListWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MARGIN_DEFAULT", "I", .constantValue.asInt = OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_MARGIN_DEFAULT, 0x19, -1, -1, -1, -1 },
    { "MIN_FRAG_CHAR_SIZE_FACTOR", "I", .constantValue.asInt = OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_MIN_FRAG_CHAR_SIZE_FACTOR, 0x19, -1, -1, -1, -1 },
    { "margin_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "minFragCharSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "createFieldFragList", "LOrgApacheLuceneSearchVectorhighlightFieldPhraseList;I" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder = { "SimpleFragListBuilder", "org.apache.lucene.search.vectorhighlight", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder;
}

@end

void OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_initWithInt_(OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder *self, jint margin) {
  NSObject_init(self);
  if (margin < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"margin(", margin, @") is too small. It must be 0 or higher."));
  self->margin_ = margin;
  self->minFragCharSize_ = JavaLangMath_maxWithInt_withInt_(1, margin * OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_MIN_FRAG_CHAR_SIZE_FACTOR);
}

OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder *new_OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_initWithInt_(jint margin) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder, initWithInt_, margin)
}

OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder *create_OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_initWithInt_(jint margin) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder, initWithInt_, margin)
}

void OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_init(OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder *self) {
  OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_initWithInt_(self, OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_MARGIN_DEFAULT);
}

OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder *new_OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder, init)
}

OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder *create_OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchVectorhighlightSimpleFragListBuilder)
