//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/lucene/search/vectorhighlight/FieldQuery.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/search/regex/RegexQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"

@interface OrgApacheLuceneSearchVectorhighlightFieldQuery ()

- (void)checkOverlapWithJavaUtilCollection:(id<JavaUtilCollection>)expandQueries
      withOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)a
      withOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)b;

- (void)checkOverlapWithJavaUtilCollection:(id<JavaUtilCollection>)expandQueries
         withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)src
         withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)dest
                                   withInt:(jint)slop
                                 withFloat:(jfloat)boost;

- (NSString *)getKeyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (id<JavaUtilSet>)getTermSetWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)getRootMapWithNSString:(NSString *)fieldName;

@end

inline jint OrgApacheLuceneSearchVectorhighlightFieldQuery_get_MAX_MTQ_TERMS();
#define OrgApacheLuceneSearchVectorhighlightFieldQuery_MAX_MTQ_TERMS 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneSearchVectorhighlightFieldQuery, MAX_MTQ_TERMS, jint)

__attribute__((unused)) static void OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchPhraseQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, id<JavaUtilCollection> expandQueries, OrgApacheLuceneSearchPhraseQuery *a, OrgApacheLuceneSearchPhraseQuery *b);

__attribute__((unused)) static void OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneIndexTermArray_withOrgApacheLuceneIndexTermArray_withInt_withFloat_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, id<JavaUtilCollection> expandQueries, IOSObjectArray *src, IOSObjectArray *dest, jint slop, jfloat boost);

__attribute__((unused)) static NSString *OrgApacheLuceneSearchVectorhighlightFieldQuery_getKeyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static id<JavaUtilSet> OrgApacheLuceneSearchVectorhighlightFieldQuery_getTermSetWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *OrgApacheLuceneSearchVectorhighlightFieldQuery_getRootMapWithNSString_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, NSString *fieldName);

@interface OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap ()

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)getOrNewMapWithJavaUtilMap:(id<JavaUtilMap>)subMap
                                                                                 withNSString:(NSString *)term;

- (void)markTerminalWithFloat:(jfloat)boost;

- (void)markTerminalWithInt:(jint)slop
                  withFloat:(jfloat)boost;

@end

__attribute__((unused)) static OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_getOrNewMapWithJavaUtilMap_withNSString_(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *self, id<JavaUtilMap> subMap, NSString *term);

__attribute__((unused)) static void OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithFloat_(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *self, jfloat boost);

__attribute__((unused)) static void OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithInt_withFloat_(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *self, jint slop, jfloat boost);

@implementation OrgApacheLuceneSearchVectorhighlightFieldQuery

- (instancetype)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
               withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                       withBoolean:(jboolean)phraseHighlight
                                       withBoolean:(jboolean)fieldMatch {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withBoolean_withBoolean_(self, query, reader, phraseHighlight, fieldMatch);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                       withBoolean:(jboolean)phraseHighlight
                                       withBoolean:(jboolean)fieldMatch {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withBoolean_withBoolean_(self, query, phraseHighlight, fieldMatch);
  return self;
}

- (void)flattenWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)sourceQuery
          withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                       withJavaUtilCollection:(id<JavaUtilCollection>)flatQueries {
  if ([sourceQuery isKindOfClass:[OrgApacheLuceneSearchBooleanQuery class]]) {
    OrgApacheLuceneSearchBooleanQuery *bq = (OrgApacheLuceneSearchBooleanQuery *) cast_chk(sourceQuery, [OrgApacheLuceneSearchBooleanQuery class]);
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(bq)) getClauses];
      OrgApacheLuceneSearchBooleanClause * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchBooleanClause * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchBooleanClause *clause = *b__++;
        if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(clause)) isProhibited]) [self flattenWithOrgApacheLuceneSearchQuery:[clause getQuery] withOrgApacheLuceneIndexIndexReader:reader withJavaUtilCollection:flatQueries];
      }
    }
  }
  else if ([sourceQuery isKindOfClass:[OrgApacheLuceneSearchDisjunctionMaxQuery class]]) {
    OrgApacheLuceneSearchDisjunctionMaxQuery *dmq = (OrgApacheLuceneSearchDisjunctionMaxQuery *) cast_chk(sourceQuery, [OrgApacheLuceneSearchDisjunctionMaxQuery class]);
    for (OrgApacheLuceneSearchQuery * __strong query in nil_chk(dmq)) {
      [self flattenWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneIndexIndexReader:reader withJavaUtilCollection:flatQueries];
    }
  }
  else if ([sourceQuery isKindOfClass:[OrgApacheLuceneSearchTermQuery class]]) {
    if (![((id<JavaUtilCollection>) nil_chk(flatQueries)) containsWithId:sourceQuery]) [flatQueries addWithId:sourceQuery];
  }
  else if ([sourceQuery isKindOfClass:[OrgApacheLuceneSearchMultiTermQuery class]] && reader != nil) {
    OrgApacheLuceneSearchMultiTermQuery *copy_ = (OrgApacheLuceneSearchMultiTermQuery *) cast_chk([((OrgApacheLuceneSearchQuery *) nil_chk(sourceQuery)) java_clone], [OrgApacheLuceneSearchMultiTermQuery class]);
    [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(copy_)) setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:new_OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(OrgApacheLuceneSearchVectorhighlightFieldQuery_MAX_MTQ_TERMS)];
    OrgApacheLuceneSearchBooleanQuery *mtqTerms = (OrgApacheLuceneSearchBooleanQuery *) cast_chk([copy_ rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchBooleanQuery class]);
    [self flattenWithOrgApacheLuceneSearchQuery:mtqTerms withOrgApacheLuceneIndexIndexReader:reader withJavaUtilCollection:flatQueries];
  }
  else if ([sourceQuery isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    if (![((id<JavaUtilCollection>) nil_chk(flatQueries)) containsWithId:sourceQuery]) {
      OrgApacheLuceneSearchPhraseQuery *pq = (OrgApacheLuceneSearchPhraseQuery *) cast_chk(sourceQuery, [OrgApacheLuceneSearchPhraseQuery class]);
      if (((IOSObjectArray *) nil_chk([((OrgApacheLuceneSearchPhraseQuery *) nil_chk(pq)) getTerms]))->size_ > 1) [flatQueries addWithId:pq];
      else if (((IOSObjectArray *) nil_chk([pq getTerms]))->size_ == 1) {
        [flatQueries addWithId:new_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(nil_chk([pq getTerms]), 0))];
      }
    }
  }
}

- (id<JavaUtilCollection>)expandWithJavaUtilCollection:(id<JavaUtilCollection>)flatQueries {
  id<JavaUtilList> expandQueries = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(flatQueries)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    OrgApacheLuceneSearchQuery *query = [i next];
    [i remove];
    [expandQueries addWithId:query];
    if (!([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]])) continue;
    for (id<JavaUtilIterator> j = [flatQueries iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
      OrgApacheLuceneSearchQuery *qj = [j next];
      if (!([qj isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]])) continue;
      OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchPhraseQuery_(self, expandQueries, (OrgApacheLuceneSearchPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchPhraseQuery class]), (OrgApacheLuceneSearchPhraseQuery *) cast_chk(qj, [OrgApacheLuceneSearchPhraseQuery class]));
    }
  }
  return expandQueries;
}

- (void)checkOverlapWithJavaUtilCollection:(id<JavaUtilCollection>)expandQueries
      withOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)a
      withOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)b {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchPhraseQuery_(self, expandQueries, a, b);
}

- (void)checkOverlapWithJavaUtilCollection:(id<JavaUtilCollection>)expandQueries
         withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)src
         withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)dest
                                   withInt:(jint)slop
                                 withFloat:(jfloat)boost {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneIndexTermArray_withOrgApacheLuceneIndexTermArray_withInt_withFloat_(self, expandQueries, src, dest, slop, boost);
}

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)getRootMapWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  NSString *key = OrgApacheLuceneSearchVectorhighlightFieldQuery_getKeyWithOrgApacheLuceneSearchQuery_(self, query);
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *map = [((id<JavaUtilMap>) nil_chk(rootMaps_)) getWithId:key];
  if (map == nil) {
    map = new_OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_(self);
    (void) [((id<JavaUtilMap>) nil_chk(rootMaps_)) putWithId:key withId:map];
  }
  return map;
}

- (NSString *)getKeyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  return OrgApacheLuceneSearchVectorhighlightFieldQuery_getKeyWithOrgApacheLuceneSearchQuery_(self, query);
}

- (void)saveTermsWithJavaUtilCollection:(id<JavaUtilCollection>)flatQueries
    withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  for (OrgApacheLuceneSearchQuery * __strong query in nil_chk(flatQueries)) {
    id<JavaUtilSet> termSet = OrgApacheLuceneSearchVectorhighlightFieldQuery_getTermSetWithOrgApacheLuceneSearchQuery_(self, query);
    if ([query isKindOfClass:[OrgApacheLuceneSearchTermQuery class]]) [((id<JavaUtilSet>) nil_chk(termSet)) addWithId:[((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneSearchTermQuery *) nil_chk(((OrgApacheLuceneSearchTermQuery *) cast_chk(query, [OrgApacheLuceneSearchTermQuery class])))) getTerm])) text]];
    else if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
      {
        IOSObjectArray *a__ = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(((OrgApacheLuceneSearchPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchPhraseQuery class])))) getTerms];
        OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneIndexTerm *term = *b__++;
          [((id<JavaUtilSet>) nil_chk(termSet)) addWithId:[((OrgApacheLuceneIndexTerm *) nil_chk(term)) text]];
        }
      }
    }
    else if ([query isKindOfClass:[OrgApacheLuceneSearchMultiTermQuery class]] && reader != nil) {
      OrgApacheLuceneSearchBooleanQuery *mtqTerms = (OrgApacheLuceneSearchBooleanQuery *) cast_chk([((OrgApacheLuceneSearchQuery *) nil_chk(query)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchBooleanQuery class]);
      {
        IOSObjectArray *a__ = [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(mtqTerms)) getClauses];
        OrgApacheLuceneSearchBooleanClause * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneSearchBooleanClause * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneSearchBooleanClause *clause = *b__++;
          [((id<JavaUtilSet>) nil_chk(termSet)) addWithId:[((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneSearchTermQuery *) nil_chk(((OrgApacheLuceneSearchTermQuery *) cast_chk([((OrgApacheLuceneSearchBooleanClause *) nil_chk(clause)) getQuery], [OrgApacheLuceneSearchTermQuery class])))) getTerm])) text]];
        }
      }
    }
    else @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"query \"", [((OrgApacheLuceneSearchQuery *) nil_chk(query)) description], @"\" must be flatten first."));
  }
}

- (id<JavaUtilSet>)getTermSetWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  return OrgApacheLuceneSearchVectorhighlightFieldQuery_getTermSetWithOrgApacheLuceneSearchQuery_(self, query);
}

- (id<JavaUtilSet>)getTermSetWithNSString:(NSString *)field {
  return [((id<JavaUtilMap>) nil_chk(termSetMap_)) getWithId:fieldMatch_ ? field : nil];
}

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)getFieldTermMapWithNSString:(NSString *)fieldName
                                                                                  withNSString:(NSString *)term {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *rootMap = OrgApacheLuceneSearchVectorhighlightFieldQuery_getRootMapWithNSString_(self, fieldName);
  return rootMap == nil ? nil : [((id<JavaUtilMap>) nil_chk(rootMap->subMap_)) getWithId:term];
}

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)searchPhraseWithNSString:(NSString *)fieldName
                                                                           withJavaUtilList:(id<JavaUtilList>)phraseCandidate {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *root = OrgApacheLuceneSearchVectorhighlightFieldQuery_getRootMapWithNSString_(self, fieldName);
  if (root == nil) return nil;
  return [root searchPhraseWithJavaUtilList:phraseCandidate];
}

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)getRootMapWithNSString:(NSString *)fieldName {
  return OrgApacheLuceneSearchVectorhighlightFieldQuery_getRootMapWithNSString_(self, fieldName);
}

- (jint)nextTermOrPhraseNumber {
  return termOrPhraseNumber_++;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, 1, 5, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x0, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x2, 9, 12, -1, 13, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, 1, 19, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 20, 15, -1, 21, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, 20, 22, -1, 23, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;", 0x1, 26, 27, -1, 28, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;", 0x2, 14, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexIndexReader:withBoolean:withBoolean:);
  methods[1].selector = @selector(initWithOrgApacheLuceneSearchQuery:withBoolean:withBoolean:);
  methods[2].selector = @selector(flattenWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexIndexReader:withJavaUtilCollection:);
  methods[3].selector = @selector(expandWithJavaUtilCollection:);
  methods[4].selector = @selector(checkOverlapWithJavaUtilCollection:withOrgApacheLuceneSearchPhraseQuery:withOrgApacheLuceneSearchPhraseQuery:);
  methods[5].selector = @selector(checkOverlapWithJavaUtilCollection:withOrgApacheLuceneIndexTermArray:withOrgApacheLuceneIndexTermArray:withInt:withFloat:);
  methods[6].selector = @selector(getRootMapWithOrgApacheLuceneSearchQuery:);
  methods[7].selector = @selector(getKeyWithOrgApacheLuceneSearchQuery:);
  methods[8].selector = @selector(saveTermsWithJavaUtilCollection:withOrgApacheLuceneIndexIndexReader:);
  methods[9].selector = @selector(getTermSetWithOrgApacheLuceneSearchQuery:);
  methods[10].selector = @selector(getTermSetWithNSString:);
  methods[11].selector = @selector(getFieldTermMapWithNSString:withNSString:);
  methods[12].selector = @selector(searchPhraseWithNSString:withJavaUtilList:);
  methods[13].selector = @selector(getRootMapWithNSString:);
  methods[14].selector = @selector(nextTermOrPhraseNumber);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldMatch_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "rootMaps_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 29, -1 },
    { "termSetMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 30, -1 },
    { "termOrPhraseNumber_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "MAX_MTQ_TERMS", "I", .constantValue.asInt = OrgApacheLuceneSearchVectorhighlightFieldQuery_MAX_MTQ_TERMS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexIndexReader;ZZ", "LJavaIoIOException;", "LOrgApacheLuceneSearchQuery;ZZ", "flatten", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexIndexReader;LJavaUtilCollection;", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection<Lorg/apache/lucene/search/Query;>;)V", "expand", "LJavaUtilCollection;", "(Ljava/util/Collection<Lorg/apache/lucene/search/Query;>;)Ljava/util/Collection<Lorg/apache/lucene/search/Query;>;", "checkOverlap", "LJavaUtilCollection;LOrgApacheLuceneSearchPhraseQuery;LOrgApacheLuceneSearchPhraseQuery;", "(Ljava/util/Collection<Lorg/apache/lucene/search/Query;>;Lorg/apache/lucene/search/PhraseQuery;Lorg/apache/lucene/search/PhraseQuery;)V", "LJavaUtilCollection;[LOrgApacheLuceneIndexTerm;[LOrgApacheLuceneIndexTerm;IF", "(Ljava/util/Collection<Lorg/apache/lucene/search/Query;>;[Lorg/apache/lucene/index/Term;[Lorg/apache/lucene/index/Term;IF)V", "getRootMap", "LOrgApacheLuceneSearchQuery;", "getKey", "saveTerms", "LJavaUtilCollection;LOrgApacheLuceneIndexIndexReader;", "(Ljava/util/Collection<Lorg/apache/lucene/search/Query;>;Lorg/apache/lucene/index/IndexReader;)V", "getTermSet", "(Lorg/apache/lucene/search/Query;)Ljava/util/Set<Ljava/lang/String;>;", "LNSString;", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "getFieldTermMap", "LNSString;LNSString;", "searchPhrase", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;>;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;", "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchVectorhighlightFieldQuery = { "FieldQuery", "org.apache.lucene.search.vectorhighlight", ptrTable, methods, fields, 7, 0x1, 15, 5, -1, 31, -1, -1, -1 };
  return &_OrgApacheLuceneSearchVectorhighlightFieldQuery;
}

@end

void OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withBoolean_withBoolean_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, OrgApacheLuceneSearchQuery *query, OrgApacheLuceneIndexIndexReader *reader, jboolean phraseHighlight, jboolean fieldMatch) {
  NSObject_init(self);
  self->rootMaps_ = new_JavaUtilHashMap_init();
  self->termSetMap_ = new_JavaUtilHashMap_init();
  self->fieldMatch_ = fieldMatch;
  id<JavaUtilList> flatQueries = new_JavaUtilArrayList_init();
  [self flattenWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneIndexIndexReader:reader withJavaUtilCollection:flatQueries];
  [self saveTermsWithJavaUtilCollection:flatQueries withOrgApacheLuceneIndexIndexReader:reader];
  id<JavaUtilCollection> expandQueries = [self expandWithJavaUtilCollection:flatQueries];
  for (OrgApacheLuceneSearchQuery * __strong flatQuery in nil_chk(expandQueries)) {
    OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *rootMap = [self getRootMapWithOrgApacheLuceneSearchQuery:flatQuery];
    [((OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *) nil_chk(rootMap)) addWithOrgApacheLuceneSearchQuery:flatQuery withOrgApacheLuceneIndexIndexReader:reader];
    if (!phraseHighlight && [flatQuery isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
      OrgApacheLuceneSearchPhraseQuery *pq = (OrgApacheLuceneSearchPhraseQuery *) cast_chk(flatQuery, [OrgApacheLuceneSearchPhraseQuery class]);
      if (((IOSObjectArray *) nil_chk([((OrgApacheLuceneSearchPhraseQuery *) nil_chk(pq)) getTerms]))->size_ > 1) {
        {
          IOSObjectArray *a__ = [pq getTerms];
          OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            OrgApacheLuceneIndexTerm *term = *b__++;
            [rootMap addTermWithOrgApacheLuceneIndexTerm:term withFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(flatQuery)) getBoost]];
          }
        }
      }
    }
  }
}

OrgApacheLuceneSearchVectorhighlightFieldQuery *new_OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withBoolean_withBoolean_(OrgApacheLuceneSearchQuery *query, OrgApacheLuceneIndexIndexReader *reader, jboolean phraseHighlight, jboolean fieldMatch) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldQuery, initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withBoolean_withBoolean_, query, reader, phraseHighlight, fieldMatch)
}

OrgApacheLuceneSearchVectorhighlightFieldQuery *create_OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withBoolean_withBoolean_(OrgApacheLuceneSearchQuery *query, OrgApacheLuceneIndexIndexReader *reader, jboolean phraseHighlight, jboolean fieldMatch) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldQuery, initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withBoolean_withBoolean_, query, reader, phraseHighlight, fieldMatch)
}

void OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withBoolean_withBoolean_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, OrgApacheLuceneSearchQuery *query, jboolean phraseHighlight, jboolean fieldMatch) {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withBoolean_withBoolean_(self, query, nil, phraseHighlight, fieldMatch);
}

OrgApacheLuceneSearchVectorhighlightFieldQuery *new_OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withBoolean_withBoolean_(OrgApacheLuceneSearchQuery *query, jboolean phraseHighlight, jboolean fieldMatch) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldQuery, initWithOrgApacheLuceneSearchQuery_withBoolean_withBoolean_, query, phraseHighlight, fieldMatch)
}

OrgApacheLuceneSearchVectorhighlightFieldQuery *create_OrgApacheLuceneSearchVectorhighlightFieldQuery_initWithOrgApacheLuceneSearchQuery_withBoolean_withBoolean_(OrgApacheLuceneSearchQuery *query, jboolean phraseHighlight, jboolean fieldMatch) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldQuery, initWithOrgApacheLuceneSearchQuery_withBoolean_withBoolean_, query, phraseHighlight, fieldMatch)
}

void OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchPhraseQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, id<JavaUtilCollection> expandQueries, OrgApacheLuceneSearchPhraseQuery *a, OrgApacheLuceneSearchPhraseQuery *b) {
  if ([((OrgApacheLuceneSearchPhraseQuery *) nil_chk(a)) getSlop] != [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(b)) getSlop]) return;
  IOSObjectArray *ats = [a getTerms];
  IOSObjectArray *bts = [b getTerms];
  if (self->fieldMatch_ && ![((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(ats), 0))) field])) isEqual:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(bts), 0))) field]]) return;
  OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneIndexTermArray_withOrgApacheLuceneIndexTermArray_withInt_withFloat_(self, expandQueries, ats, bts, [a getSlop], [a getBoost]);
  OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneIndexTermArray_withOrgApacheLuceneIndexTermArray_withInt_withFloat_(self, expandQueries, bts, ats, [b getSlop], [b getBoost]);
}

void OrgApacheLuceneSearchVectorhighlightFieldQuery_checkOverlapWithJavaUtilCollection_withOrgApacheLuceneIndexTermArray_withOrgApacheLuceneIndexTermArray_withInt_withFloat_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, id<JavaUtilCollection> expandQueries, IOSObjectArray *src, IOSObjectArray *dest, jint slop, jfloat boost) {
  for (jint i = 1; i < ((IOSObjectArray *) nil_chk(src))->size_; i++) {
    jboolean overlap = true;
    for (jint j = i; j < src->size_; j++) {
      if ((j - i) < ((IOSObjectArray *) nil_chk(dest))->size_ && ![((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(src, j))) text])) isEqual:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(dest, j - i))) text]]) {
        overlap = false;
        break;
      }
    }
    if (overlap && src->size_ - i < ((IOSObjectArray *) nil_chk(dest))->size_) {
      OrgApacheLuceneSearchPhraseQuery *pq = new_OrgApacheLuceneSearchPhraseQuery_init();
      {
        IOSObjectArray *a__ = src;
        OrgApacheLuceneIndexTerm * const *b__ = a__->buffer_;
        OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneIndexTerm *srcTerm = *b__++;
          [pq addWithOrgApacheLuceneIndexTerm:srcTerm];
        }
      }
      for (jint k = src->size_ - i; k < ((IOSObjectArray *) nil_chk(dest))->size_; k++) {
        [pq addWithOrgApacheLuceneIndexTerm:new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(src, 0))) field], [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(dest, k))) text])];
      }
      [pq setSlopWithInt:slop];
      [pq setBoostWithFloat:boost];
      if (![((id<JavaUtilCollection>) nil_chk(expandQueries)) containsWithId:pq]) [expandQueries addWithId:pq];
    }
  }
}

NSString *OrgApacheLuceneSearchVectorhighlightFieldQuery_getKeyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, OrgApacheLuceneSearchQuery *query) {
  if (!self->fieldMatch_) return nil;
  if ([query isKindOfClass:[OrgApacheLuceneSearchTermQuery class]]) return [((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneSearchTermQuery *) nil_chk(((OrgApacheLuceneSearchTermQuery *) cast_chk(query, [OrgApacheLuceneSearchTermQuery class])))) getTerm])) field];
  else if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    OrgApacheLuceneSearchPhraseQuery *pq = (OrgApacheLuceneSearchPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchPhraseQuery class]);
    IOSObjectArray *terms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(pq)) getTerms];
    return [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(terms), 0))) field];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchFuzzyQuery class]]) {
    return [((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneSearchFuzzyQuery *) nil_chk(((OrgApacheLuceneSearchFuzzyQuery *) cast_chk(query, [OrgApacheLuceneSearchFuzzyQuery class])))) getTerm])) field];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchPrefixQuery class]]) {
    return [((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneSearchPrefixQuery *) nil_chk(((OrgApacheLuceneSearchPrefixQuery *) cast_chk(query, [OrgApacheLuceneSearchPrefixQuery class])))) getPrefix])) field];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchRegexRegexQuery class]]) {
    return [((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneSearchRegexRegexQuery *) nil_chk(((OrgApacheLuceneSearchRegexRegexQuery *) cast_chk(query, [OrgApacheLuceneSearchRegexRegexQuery class])))) getTerm])) field];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchTermRangeQuery class]]) {
    return [((OrgApacheLuceneSearchTermRangeQuery *) nil_chk(((OrgApacheLuceneSearchTermRangeQuery *) cast_chk(query, [OrgApacheLuceneSearchTermRangeQuery class])))) getField];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchWildcardQuery class]]) {
    return [((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneSearchWildcardQuery *) nil_chk(((OrgApacheLuceneSearchWildcardQuery *) cast_chk(query, [OrgApacheLuceneSearchWildcardQuery class])))) getTerm])) field];
  }
  else @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"query \"", [((OrgApacheLuceneSearchQuery *) nil_chk(query)) description], @"\" must be flatten first."));
}

id<JavaUtilSet> OrgApacheLuceneSearchVectorhighlightFieldQuery_getTermSetWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, OrgApacheLuceneSearchQuery *query) {
  NSString *key = OrgApacheLuceneSearchVectorhighlightFieldQuery_getKeyWithOrgApacheLuceneSearchQuery_(self, query);
  id<JavaUtilSet> set = [((id<JavaUtilMap>) nil_chk(self->termSetMap_)) getWithId:key];
  if (set == nil) {
    set = new_JavaUtilHashSet_init();
    (void) [((id<JavaUtilMap>) nil_chk(self->termSetMap_)) putWithId:key withId:set];
  }
  return set;
}

OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *OrgApacheLuceneSearchVectorhighlightFieldQuery_getRootMapWithNSString_(OrgApacheLuceneSearchVectorhighlightFieldQuery *self, NSString *fieldName) {
  return [((id<JavaUtilMap>) nil_chk(self->rootMaps_)) getWithId:self->fieldMatch_ ? fieldName : nil];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchVectorhighlightFieldQuery)

@implementation OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap

- (instancetype)initWithOrgApacheLuceneSearchVectorhighlightFieldQuery:(OrgApacheLuceneSearchVectorhighlightFieldQuery *)fieldQuery {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_(self, fieldQuery);
  return self;
}

- (void)addTermWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                  withFloat:(jfloat)boost {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *map = OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_getOrNewMapWithJavaUtilMap_withNSString_(self, subMap_, [((OrgApacheLuceneIndexTerm *) nil_chk(term)) text]);
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithFloat_(nil_chk(map), boost);
}

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)getOrNewMapWithJavaUtilMap:(id<JavaUtilMap>)subMap
                                                                                 withNSString:(NSString *)term {
  return OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_getOrNewMapWithJavaUtilMap_withNSString_(self, subMap, term);
}

- (void)addWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
      withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([query isKindOfClass:[OrgApacheLuceneSearchTermQuery class]]) {
    [self addTermWithOrgApacheLuceneIndexTerm:[((OrgApacheLuceneSearchTermQuery *) nil_chk(((OrgApacheLuceneSearchTermQuery *) cast_chk(query, [OrgApacheLuceneSearchTermQuery class])))) getTerm] withFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    OrgApacheLuceneSearchPhraseQuery *pq = (OrgApacheLuceneSearchPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchPhraseQuery class]);
    IOSObjectArray *terms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(pq)) getTerms];
    id<JavaUtilMap> map = subMap_;
    OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *qpm = nil;
    {
      IOSObjectArray *a__ = terms;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        qpm = OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_getOrNewMapWithJavaUtilMap_withNSString_(self, map, [((OrgApacheLuceneIndexTerm *) nil_chk(term)) text]);
        map = ((OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *) nil_chk(qpm))->subMap_;
      }
    }
    OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithInt_withFloat_(nil_chk(qpm), [pq getSlop], [pq getBoost]);
  }
  else @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"query \"", [((OrgApacheLuceneSearchQuery *) nil_chk(query)) description], @"\" must be flatten first."));
}

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)getTermMapWithNSString:(NSString *)term {
  return [((id<JavaUtilMap>) nil_chk(subMap_)) getWithId:term];
}

- (void)markTerminalWithFloat:(jfloat)boost {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithFloat_(self, boost);
}

- (void)markTerminalWithInt:(jint)slop
                  withFloat:(jfloat)boost {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithInt_withFloat_(self, slop, boost);
}

- (jboolean)isTerminal {
  return terminal_;
}

- (jint)getSlop {
  return slop_;
}

- (jfloat)getBoost {
  return boost_;
}

- (jint)getTermOrPhraseNumber {
  return termOrPhraseNumber_;
}

- (OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *)searchPhraseWithJavaUtilList:(id<JavaUtilList>)phraseCandidate {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *currMap = self;
  for (OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo * __strong ti in nil_chk(phraseCandidate)) {
    currMap = [((id<JavaUtilMap>) nil_chk(currMap->subMap_)) getWithId:[((OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *) nil_chk(ti)) getText]];
    if (currMap == nil) return nil;
  }
  return [currMap isValidTermOrPhraseWithJavaUtilList:phraseCandidate] ? currMap : nil;
}

- (jboolean)isValidTermOrPhraseWithJavaUtilList:(id<JavaUtilList>)phraseCandidate {
  if (!terminal_) return false;
  if ([((id<JavaUtilList>) nil_chk(phraseCandidate)) size] == 1) return true;
  jint pos = [((OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *) nil_chk([phraseCandidate getWithInt:0])) getPosition];
  for (jint i = 1; i < [phraseCandidate size]; i++) {
    jint nextPos = [((OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *) nil_chk([phraseCandidate getWithInt:i])) getPosition];
    if (JavaLangMath_absWithInt_(nextPos - pos - 1) > slop_) return false;
    pos = nextPos;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x0, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "Z", 0x1, 17, 15, -1, 18, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchVectorhighlightFieldQuery:);
  methods[1].selector = @selector(addTermWithOrgApacheLuceneIndexTerm:withFloat:);
  methods[2].selector = @selector(getOrNewMapWithJavaUtilMap:withNSString:);
  methods[3].selector = @selector(addWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexIndexReader:);
  methods[4].selector = @selector(getTermMapWithNSString:);
  methods[5].selector = @selector(markTerminalWithFloat:);
  methods[6].selector = @selector(markTerminalWithInt:withFloat:);
  methods[7].selector = @selector(isTerminal);
  methods[8].selector = @selector(getSlop);
  methods[9].selector = @selector(getBoost);
  methods[10].selector = @selector(getTermOrPhraseNumber);
  methods[11].selector = @selector(searchPhraseWithJavaUtilList:);
  methods[12].selector = @selector(isValidTermOrPhraseWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "terminal_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "boost_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "termOrPhraseNumber_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fieldQuery_", "LOrgApacheLuceneSearchVectorhighlightFieldQuery;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchVectorhighlightFieldQuery;", "addTerm", "LOrgApacheLuceneIndexTerm;F", "getOrNewMap", "LJavaUtilMap;LNSString;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;>;Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;", "add", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "getTermMap", "LNSString;", "markTerminal", "F", "IF", "searchPhrase", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;>;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;", "isValidTermOrPhrase", "(Ljava/util/List<Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;>;)Z", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap = { "QueryPhraseMap", "org.apache.lucene.search.vectorhighlight", ptrTable, methods, fields, 7, 0x9, 13, 6, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap;
}

@end

void OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *self, OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery) {
  NSObject_init(self);
  self->subMap_ = new_JavaUtilHashMap_init();
  self->fieldQuery_ = fieldQuery;
}

OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *new_OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap, initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_, fieldQuery)
}

OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *create_OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_(OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap, initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_, fieldQuery)
}

OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_getOrNewMapWithJavaUtilMap_withNSString_(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *self, id<JavaUtilMap> subMap, NSString *term) {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *map = [((id<JavaUtilMap>) nil_chk(subMap)) getWithId:term];
  if (map == nil) {
    map = new_OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_initWithOrgApacheLuceneSearchVectorhighlightFieldQuery_(self->fieldQuery_);
    (void) [subMap putWithId:term withId:map];
  }
  return map;
}

void OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithFloat_(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *self, jfloat boost) {
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithInt_withFloat_(self, 0, boost);
}

void OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap_markTerminalWithInt_withFloat_(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *self, jint slop, jfloat boost) {
  self->terminal_ = true;
  self->slop_ = slop;
  self->boost_ = boost;
  self->termOrPhraseNumber_ = [((OrgApacheLuceneSearchVectorhighlightFieldQuery *) nil_chk(self->fieldQuery_)) nextTermOrPhraseNumber];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap)
