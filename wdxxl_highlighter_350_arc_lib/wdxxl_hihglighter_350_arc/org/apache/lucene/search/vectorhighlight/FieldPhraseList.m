//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"

@implementation OrgApacheLuceneSearchVectorhighlightFieldPhraseList

- (instancetype)initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack:(OrgApacheLuceneSearchVectorhighlightFieldTermStack *)fieldTermStack
                        withOrgApacheLuceneSearchVectorhighlightFieldQuery:(OrgApacheLuceneSearchVectorhighlightFieldQuery *)fieldQuery {
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_(self, fieldTermStack, fieldQuery);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack:(OrgApacheLuceneSearchVectorhighlightFieldTermStack *)fieldTermStack
                        withOrgApacheLuceneSearchVectorhighlightFieldQuery:(OrgApacheLuceneSearchVectorhighlightFieldQuery *)fieldQuery
                                                                   withInt:(jint)phraseLimit {
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_withInt_(self, fieldTermStack, fieldQuery, phraseLimit);
  return self;
}

- (void)addIfNoOverlapWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo:(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *)wpi {
  for (OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo * __strong existWpi in nil_chk(phraseList_)) {
    if ([((OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *) nil_chk(existWpi)) isOffsetOverlapWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo:wpi]) return;
  }
  [phraseList_ addWithId:wpi];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack:withOrgApacheLuceneSearchVectorhighlightFieldQuery:);
  methods[1].selector = @selector(initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack:withOrgApacheLuceneSearchVectorhighlightFieldQuery:withInt:);
  methods[2].selector = @selector(addIfNoOverlapWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "phraseList_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchVectorhighlightFieldTermStack;LOrgApacheLuceneSearchVectorhighlightFieldQuery;", "LOrgApacheLuceneSearchVectorhighlightFieldTermStack;LOrgApacheLuceneSearchVectorhighlightFieldQuery;I", "addIfNoOverlap", "LOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo;", "Ljava/util/LinkedList<Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchVectorhighlightFieldPhraseList = { "FieldPhraseList", "org.apache.lucene.search.vectorhighlight", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, 3, -1, -1, -1 };
  return &_OrgApacheLuceneSearchVectorhighlightFieldPhraseList;
}

@end

void OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_(OrgApacheLuceneSearchVectorhighlightFieldPhraseList *self, OrgApacheLuceneSearchVectorhighlightFieldTermStack *fieldTermStack, OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery) {
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_withInt_(self, fieldTermStack, fieldQuery, JavaLangInteger_MAX_VALUE);
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList *new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_(OrgApacheLuceneSearchVectorhighlightFieldTermStack *fieldTermStack, OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList, initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_, fieldTermStack, fieldQuery)
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList *create_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_(OrgApacheLuceneSearchVectorhighlightFieldTermStack *fieldTermStack, OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList, initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_, fieldTermStack, fieldQuery)
}

void OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_withInt_(OrgApacheLuceneSearchVectorhighlightFieldPhraseList *self, OrgApacheLuceneSearchVectorhighlightFieldTermStack *fieldTermStack, OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery, jint phraseLimit) {
  NSObject_init(self);
  self->phraseList_ = new_JavaUtilLinkedList_init();
  NSString *field = [((OrgApacheLuceneSearchVectorhighlightFieldTermStack *) nil_chk(fieldTermStack)) getFieldName];
  JavaUtilLinkedList *phraseCandidate = new_JavaUtilLinkedList_init();
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *currMap = nil;
  OrgApacheLuceneSearchVectorhighlightFieldQuery_QueryPhraseMap *nextMap = nil;
  while (![fieldTermStack isEmpty] && ([((JavaUtilLinkedList *) nil_chk(self->phraseList_)) size] < phraseLimit)) {
    [phraseCandidate clear];
    OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *ti = [fieldTermStack pop];
    currMap = [((OrgApacheLuceneSearchVectorhighlightFieldQuery *) nil_chk(fieldQuery)) getFieldTermMapWithNSString:field withNSString:[((OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *) nil_chk(ti)) getText]];
    if (currMap == nil) continue;
    [phraseCandidate addWithId:ti];
    while (true) {
      ti = [fieldTermStack pop];
      nextMap = nil;
      if (ti != nil) nextMap = [currMap getTermMapWithNSString:[ti getText]];
      if (ti == nil || nextMap == nil) {
        if (ti != nil) [fieldTermStack pushWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo:ti];
        if ([currMap isValidTermOrPhraseWithJavaUtilList:phraseCandidate]) {
          [self addIfNoOverlapWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo:new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_withInt_(phraseCandidate, [currMap getBoost], [currMap getTermOrPhraseNumber])];
        }
        else {
          while ([phraseCandidate size] > 1) {
            [fieldTermStack pushWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo:[phraseCandidate removeLast]];
            currMap = [fieldQuery searchPhraseWithNSString:field withJavaUtilList:phraseCandidate];
            if (currMap != nil) {
              [self addIfNoOverlapWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo:new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_withInt_(phraseCandidate, [currMap getBoost], [currMap getTermOrPhraseNumber])];
              break;
            }
          }
        }
        break;
      }
      else {
        [phraseCandidate addWithId:ti];
        currMap = nextMap;
      }
    }
  }
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList *new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_withInt_(OrgApacheLuceneSearchVectorhighlightFieldTermStack *fieldTermStack, OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery, jint phraseLimit) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList, initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_withInt_, fieldTermStack, fieldQuery, phraseLimit)
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList *create_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_withInt_(OrgApacheLuceneSearchVectorhighlightFieldTermStack *fieldTermStack, OrgApacheLuceneSearchVectorhighlightFieldQuery *fieldQuery, jint phraseLimit) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList, initWithOrgApacheLuceneSearchVectorhighlightFieldTermStack_withOrgApacheLuceneSearchVectorhighlightFieldQuery_withInt_, fieldTermStack, fieldQuery, phraseLimit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchVectorhighlightFieldPhraseList)

@implementation OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo

- (instancetype)initWithJavaUtilLinkedList:(JavaUtilLinkedList *)terms
                                 withFloat:(jfloat)boost {
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_(self, terms, boost);
  return self;
}

- (instancetype)initWithJavaUtilLinkedList:(JavaUtilLinkedList *)terms
                                 withFloat:(jfloat)boost
                                   withInt:(jint)number {
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_withInt_(self, terms, boost, number);
  return self;
}

- (jint)getStartOffset {
  return ((OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs *) nil_chk([((id<JavaUtilList>) nil_chk(termsOffsets_)) getWithInt:0]))->startOffset_;
}

- (jint)getEndOffset {
  return ((OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs *) nil_chk([((id<JavaUtilList>) nil_chk(termsOffsets_)) getWithInt:[termsOffsets_ size] - 1]))->endOffset_;
}

- (jboolean)isOffsetOverlapWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo:(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *)other {
  jint so = [self getStartOffset];
  jint eo = [self getEndOffset];
  jint oso = [((OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *) nil_chk(other)) getStartOffset];
  jint oeo = [other getEndOffset];
  if (so <= oso && oso < eo) return true;
  if (so < oeo && oeo <= eo) return true;
  if (oso <= so && so < oeo) return true;
  if (oso < eo && eo <= oeo) return true;
  return false;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:text_])) appendWithChar:'('])) appendWithFloat:boost_])) appendWithNSString:@")("];
  for (OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs * __strong to in nil_chk(termsOffsets_)) {
    (void) [sb appendWithId:to];
  }
  (void) [sb appendWithChar:')'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilLinkedList:withFloat:);
  methods[1].selector = @selector(initWithJavaUtilLinkedList:withFloat:withInt:);
  methods[2].selector = @selector(getStartOffset);
  methods[3].selector = @selector(getEndOffset);
  methods[4].selector = @selector(isOffsetOverlapWithOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "termsOffsets_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "boost_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "seqnum_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLinkedList;F", "(Ljava/util/LinkedList<Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;>;F)V", "LJavaUtilLinkedList;FI", "(Ljava/util/LinkedList<Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;>;FI)V", "isOffsetOverlap", "LOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo;", "toString", "Ljava/util/List<Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs;>;", "LOrgApacheLuceneSearchVectorhighlightFieldPhraseList;", "LOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo = { "WeightedPhraseInfo", "org.apache.lucene.search.vectorhighlight", ptrTable, methods, fields, 7, 0x9, 6, 4, 8, 9, -1, -1, -1 };
  return &_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo;
}

@end

void OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *self, JavaUtilLinkedList *terms, jfloat boost) {
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_withInt_(self, terms, boost, 0);
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_(JavaUtilLinkedList *terms, jfloat boost) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo, initWithJavaUtilLinkedList_withFloat_, terms, boost)
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *create_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_(JavaUtilLinkedList *terms, jfloat boost) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo, initWithJavaUtilLinkedList_withFloat_, terms, boost)
}

void OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_withInt_(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *self, JavaUtilLinkedList *terms, jfloat boost, jint number) {
  NSObject_init(self);
  self->boost_ = boost;
  self->seqnum_ = number;
  self->termsOffsets_ = new_JavaUtilArrayList_initWithInt_([((JavaUtilLinkedList *) nil_chk(terms)) size]);
  OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *ti = [terms getWithInt:0];
  [((id<JavaUtilList>) nil_chk(self->termsOffsets_)) addWithId:new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs_initWithInt_withInt_([((OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *) nil_chk(ti)) getStartOffset], [ti getEndOffset])];
  if ([terms size] == 1) {
    self->text_ = [ti getText];
    return;
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:[ti getText]];
  jint pos = [ti getPosition];
  for (jint i = 1; i < [terms size]; i++) {
    ti = [terms getWithInt:i];
    (void) [sb appendWithNSString:[((OrgApacheLuceneSearchVectorhighlightFieldTermStack_TermInfo *) nil_chk(ti)) getText]];
    if ([ti getPosition] - pos == 1) {
      OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs *to = [((id<JavaUtilList>) nil_chk(self->termsOffsets_)) getWithInt:[self->termsOffsets_ size] - 1];
      [((OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs *) nil_chk(to)) setEndOffsetWithInt:[ti getEndOffset]];
    }
    else {
      [((id<JavaUtilList>) nil_chk(self->termsOffsets_)) addWithId:new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs_initWithInt_withInt_([ti getStartOffset], [ti getEndOffset])];
    }
    pos = [ti getPosition];
  }
  self->text_ = [sb description];
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_withInt_(JavaUtilLinkedList *terms, jfloat boost, jint number) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo, initWithJavaUtilLinkedList_withFloat_withInt_, terms, boost, number)
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo *create_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_initWithJavaUtilLinkedList_withFloat_withInt_(JavaUtilLinkedList *terms, jfloat boost, jint number) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo, initWithJavaUtilLinkedList_withFloat_withInt_, terms, boost, number)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo)

@implementation OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs

- (instancetype)initWithInt:(jint)startOffset
                    withInt:(jint)endOffset {
  OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs_initWithInt_withInt_(self, startOffset, endOffset);
  return self;
}

- (void)setEndOffsetWithInt:(jint)endOffset {
  self->endOffset_ = endOffset;
}

- (jint)getStartOffset {
  return startOffset_;
}

- (jint)getEndOffset {
  return endOffset_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'('])) appendWithInt:startOffset_])) appendWithChar:','])) appendWithInt:endOffset_])) appendWithChar:')'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(setEndOffsetWithInt:);
  methods[2].selector = @selector(getStartOffset);
  methods[3].selector = @selector(getEndOffset);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "startOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "setEndOffset", "I", "toString", "LOrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs = { "Toffs", "org.apache.lucene.search.vectorhighlight", ptrTable, methods, fields, 7, 0x9, 5, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs;
}

@end

void OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs_initWithInt_withInt_(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs *self, jint startOffset, jint endOffset) {
  NSObject_init(self);
  self->startOffset_ = startOffset;
  self->endOffset_ = endOffset;
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs *new_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs_initWithInt_withInt_(jint startOffset, jint endOffset) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs, initWithInt_withInt_, startOffset, endOffset)
}

OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs *create_OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs_initWithInt_withInt_(jint startOffset, jint endOffset) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs, initWithInt_withInt_, startOffset, endOffset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchVectorhighlightFieldPhraseList_WeightedPhraseInfo_Toffs)
