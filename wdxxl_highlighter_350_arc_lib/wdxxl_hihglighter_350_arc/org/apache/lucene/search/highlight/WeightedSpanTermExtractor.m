//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/index/FilterIndexReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "org/apache/lucene/search/FilteredQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTermExtractor.h"
#include "org/apache/lucene/search/spans/FieldMaskingSpanQuery.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/StringHelper.h"

@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor () {
 @public
  NSString *fieldName_;
  OrgApacheLuceneAnalysisTokenStream *tokenStream_;
  id<JavaUtilMap> readers_;
  NSString *defaultField_;
  jboolean expandMultiTermQuery_;
  jboolean cachedTokenStream_;
  jboolean wrapToCaching_;
  jint maxDocCharsToAnalyze_;
}

- (void)closeReaders;

- (void)extractWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                              withJavaUtilMap:(id<JavaUtilMap>)terms;

- (void)extractWeightedSpanTermsWithJavaUtilMap:(id<JavaUtilMap>)terms
        withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery;

- (void)extractWeightedTermsWithJavaUtilMap:(id<JavaUtilMap>)terms
             withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (jboolean)fieldNameComparatorWithNSString:(NSString *)fieldNameToCheck;

- (OrgApacheLuceneIndexIndexReader *)getReaderForFieldWithNSString:(NSString *)field;

- (void)collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery
                                                      withJavaUtilSet:(id<JavaUtilSet>)fieldNames;

- (jboolean)mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, fieldName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, tokenStream_, OrgApacheLuceneAnalysisTokenStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, readers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, defaultField_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_closeReaders(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self);

__attribute__((unused)) static void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, OrgApacheLuceneSearchQuery *query, id<JavaUtilMap> terms);

__attribute__((unused)) static void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedSpanTermsWithJavaUtilMap_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanQuery *spanQuery);

__attribute__((unused)) static void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedTermsWithJavaUtilMap_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, id<JavaUtilMap> terms, OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_fieldNameComparatorWithNSString_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, NSString *fieldNameToCheck);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_getReaderForFieldWithNSString_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, NSString *field);

__attribute__((unused)) static void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, OrgApacheLuceneSearchSpansSpanQuery *spanQuery, id<JavaUtilSet> fieldNames);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, OrgApacheLuceneSearchSpansSpanQuery *spanQuery);

@interface OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap : JavaUtilHashMap

- (instancetype)init;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)putWithId:(id)key
                                                       withId:(OrgApacheLuceneSearchHighlightWeightedSpanTerm *)value;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)computeIfAbsentWithId:(id)arg0
                                             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)getWithId:(id)arg0;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)removeWithId:(id)arg0;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)putIfAbsentWithId:(id)arg0
                                                               withId:(OrgApacheLuceneSearchHighlightWeightedSpanTerm *)arg1;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)computeIfPresentWithId:(id)arg0
                                            withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)replaceWithId:(id)arg0
                                                           withId:(OrgApacheLuceneSearchHighlightWeightedSpanTerm *)arg1;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)computeWithId:(id)arg0
                                   withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)mergeWithId:(id)arg0
                                                         withId:(OrgApacheLuceneSearchHighlightWeightedSpanTerm *)arg1
                                 withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)getOrDefaultWithId:(id)arg0
                                                                withId:(OrgApacheLuceneSearchHighlightWeightedSpanTerm *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap)

__attribute__((unused)) static void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *self);

__attribute__((unused)) static OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap)

inline OrgApacheLuceneIndexIndexReader *OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_get_EMPTY_MEMORY_INDEX_READER();
static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_EMPTY_MEMORY_INDEX_READER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader, EMPTY_MEMORY_INDEX_READER, OrgApacheLuceneIndexIndexReader *)

@implementation OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)defaultField {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(self, defaultField);
  return self;
}

- (void)closeReaders {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_closeReaders(self);
}

- (void)extractWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                              withJavaUtilMap:(id<JavaUtilMap>)terms {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(self, query, terms);
}

- (void)extractWeightedSpanTermsWithJavaUtilMap:(id<JavaUtilMap>)terms
        withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedSpanTermsWithJavaUtilMap_withOrgApacheLuceneSearchSpansSpanQuery_(self, terms, spanQuery);
}

- (void)extractWeightedTermsWithJavaUtilMap:(id<JavaUtilMap>)terms
             withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedTermsWithJavaUtilMap_withOrgApacheLuceneSearchQuery_(self, terms, query);
}

- (jboolean)fieldNameComparatorWithNSString:(NSString *)fieldNameToCheck {
  return OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_fieldNameComparatorWithNSString_(self, fieldNameToCheck);
}

- (OrgApacheLuceneIndexIndexReader *)getReaderForFieldWithNSString:(NSString *)field {
  return OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_getReaderForFieldWithNSString_(self, field);
}

- (id<JavaUtilMap>)getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                               withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)tokenStream {
  return [self getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneAnalysisTokenStream:tokenStream withNSString:nil];
}

- (id<JavaUtilMap>)getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                               withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)tokenStream
                                                         withNSString:(NSString *)fieldName {
  if (fieldName != nil) {
    self->fieldName_ = OrgApacheLuceneUtilStringHelper_internWithNSString_(fieldName);
  }
  else {
    self->fieldName_ = nil;
  }
  id<JavaUtilMap> terms = new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init();
  self->tokenStream_ = tokenStream;
  @try {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(self, query, terms);
  }
  @finally {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_closeReaders(self);
  }
  return terms;
}

- (id<JavaUtilMap>)getWeightedSpanTermsWithScoresWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                         withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)tokenStream
                                                                   withNSString:(NSString *)fieldName
                                            withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if (fieldName != nil) {
    self->fieldName_ = OrgApacheLuceneUtilStringHelper_internWithNSString_(fieldName);
  }
  else {
    self->fieldName_ = nil;
  }
  self->tokenStream_ = tokenStream;
  id<JavaUtilMap> terms = new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init();
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(self, query, terms);
  jint totalNumDocs = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) numDocs];
  id<JavaUtilSet> weightedTerms = [terms keySet];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(weightedTerms)) iterator];
  @try {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgApacheLuceneSearchHighlightWeightedSpanTerm *weightedSpanTerm = [terms getWithId:[it next]];
      jint docFreq = [reader docFreqWithOrgApacheLuceneIndexTerm:new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(fieldName, ((OrgApacheLuceneSearchHighlightWeightedSpanTerm *) nil_chk(weightedSpanTerm))->term_)];
      if (totalNumDocs < docFreq) {
        docFreq = totalNumDocs;
      }
      jfloat idf = (jfloat) (JavaLangMath_logWithDouble_((jfloat) totalNumDocs / (jdouble) (docFreq + 1)) + 1.0);
      JreTimesAssignFloatF(&weightedSpanTerm->weight_, idf);
    }
  }
  @finally {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_closeReaders(self);
  }
  return terms;
}

- (void)collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery
                                                      withJavaUtilSet:(id<JavaUtilSet>)fieldNames {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(self, spanQuery, fieldNames);
}

- (jboolean)mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery {
  return OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, spanQuery);
}

- (jboolean)getExpandMultiTermQuery {
  return expandMultiTermQuery_;
}

- (void)setExpandMultiTermQueryWithBoolean:(jboolean)expandMultiTermQuery {
  self->expandMultiTermQuery_ = expandMultiTermQuery;
}

- (jboolean)isCachedTokenStream {
  return cachedTokenStream_;
}

- (OrgApacheLuceneAnalysisTokenStream *)getTokenStream {
  return tokenStream_;
}

- (void)setWrapIfNotCachingTokenFilterWithBoolean:(jboolean)wrap {
  self->wrapToCaching_ = wrap;
}

- (void)setMaxDocCharsToAnalyzeWithInt:(jint)maxDocCharsToAnalyze {
  self->maxDocCharsToAnalyze_ = maxDocCharsToAnalyze;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, 4, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 3, 7, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 3, 10, -1, -1 },
    { NULL, "Z", 0x2, 11, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x2, 12, 0, 3, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 13, 14, 3, 15, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 13, 16, 3, 17, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 18, 19, 3, 20, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 29, 30, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(closeReaders);
  methods[3].selector = @selector(extractWithOrgApacheLuceneSearchQuery:withJavaUtilMap:);
  methods[4].selector = @selector(extractWeightedSpanTermsWithJavaUtilMap:withOrgApacheLuceneSearchSpansSpanQuery:);
  methods[5].selector = @selector(extractWeightedTermsWithJavaUtilMap:withOrgApacheLuceneSearchQuery:);
  methods[6].selector = @selector(fieldNameComparatorWithNSString:);
  methods[7].selector = @selector(getReaderForFieldWithNSString:);
  methods[8].selector = @selector(getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneAnalysisTokenStream:);
  methods[9].selector = @selector(getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneAnalysisTokenStream:withNSString:);
  methods[10].selector = @selector(getWeightedSpanTermsWithScoresWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneAnalysisTokenStream:withNSString:withOrgApacheLuceneIndexIndexReader:);
  methods[11].selector = @selector(collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:withJavaUtilSet:);
  methods[12].selector = @selector(mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:);
  methods[13].selector = @selector(getExpandMultiTermQuery);
  methods[14].selector = @selector(setExpandMultiTermQueryWithBoolean:);
  methods[15].selector = @selector(isCachedTokenStream);
  methods[16].selector = @selector(getTokenStream);
  methods[17].selector = @selector(setWrapIfNotCachingTokenFilterWithBoolean:);
  methods[18].selector = @selector(setMaxDocCharsToAnalyzeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenStream_", "LOrgApacheLuceneAnalysisTokenStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 31, -1 },
    { "defaultField_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "expandMultiTermQuery_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cachedTokenStream_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wrapToCaching_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxDocCharsToAnalyze_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "extract", "LOrgApacheLuceneSearchQuery;LJavaUtilMap;", "LJavaIoIOException;", "(Lorg/apache/lucene/search/Query;Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;)V", "extractWeightedSpanTerms", "LJavaUtilMap;LOrgApacheLuceneSearchSpansSpanQuery;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;Lorg/apache/lucene/search/spans/SpanQuery;)V", "extractWeightedTerms", "LJavaUtilMap;LOrgApacheLuceneSearchQuery;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;Lorg/apache/lucene/search/Query;)V", "fieldNameComparator", "getReaderForField", "getWeightedSpanTerms", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneAnalysisTokenStream;", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;)Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneAnalysisTokenStream;LNSString;", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;", "getWeightedSpanTermsWithScores", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneAnalysisTokenStream;LNSString;LOrgApacheLuceneIndexIndexReader;", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;)Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;", "collectSpanQueryFields", "LOrgApacheLuceneSearchSpansSpanQuery;LJavaUtilSet;", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Set<Ljava/lang/String;>;)V", "mustRewriteQuery", "LOrgApacheLuceneSearchSpansSpanQuery;", "setExpandMultiTermQuery", "Z", "setWrapIfNotCachingTokenFilter", "setMaxDocCharsToAnalyze", "I", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;>;", "LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap;LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor = { "WeightedSpanTermExtractor", "org.apache.lucene.search.highlight", ptrTable, methods, fields, 7, 0x1, 19, 8, -1, 32, -1, -1, -1 };
  return &_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor;
}

@end

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self) {
  NSObject_init(self);
  self->readers_ = new_JavaUtilHashMap_initWithInt_(10);
  self->wrapToCaching_ = true;
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, init)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, init)
}

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, NSString *defaultField) {
  NSObject_init(self);
  self->readers_ = new_JavaUtilHashMap_initWithInt_(10);
  self->wrapToCaching_ = true;
  if (defaultField != nil) {
    self->defaultField_ = OrgApacheLuceneUtilStringHelper_internWithNSString_(defaultField);
  }
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(NSString *defaultField) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, initWithNSString_, defaultField)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(NSString *defaultField) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, initWithNSString_, defaultField)
}

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_closeReaders(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self) {
  id<JavaUtilCollection> readerSet = [((id<JavaUtilMap>) nil_chk(self->readers_)) values];
  for (OrgApacheLuceneIndexIndexReader * __strong reader in nil_chk(readerSet)) {
    @try {
      [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
}

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, OrgApacheLuceneSearchQuery *query, id<JavaUtilMap> terms) {
  if ([query isKindOfClass:[OrgApacheLuceneSearchBooleanQuery class]]) {
    IOSObjectArray *queryClauses = [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(((OrgApacheLuceneSearchBooleanQuery *) cast_chk(query, [OrgApacheLuceneSearchBooleanQuery class])))) getClauses];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(queryClauses))->size_; i++) {
      if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(IOSObjectArray_Get(queryClauses, i))) isProhibited]) {
        OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(self, [((OrgApacheLuceneSearchBooleanClause *) nil_chk(IOSObjectArray_Get(queryClauses, i))) getQuery], terms);
      }
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    OrgApacheLuceneSearchPhraseQuery *phraseQuery = ((OrgApacheLuceneSearchPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchPhraseQuery class]));
    IOSObjectArray *phraseQueryTerms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery)) getTerms];
    IOSObjectArray *clauses = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(phraseQueryTerms))->size_ type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
    for (jint i = 0; i < phraseQueryTerms->size_; i++) {
      (void) IOSObjectArray_SetAndConsume(clauses, i, new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(phraseQueryTerms, i)));
    }
    jint slop = [phraseQuery getSlop];
    IOSIntArray *positions = [phraseQuery getPositions];
    if (((IOSIntArray *) nil_chk(positions))->size_ > 0) {
      jint lastPos = IOSIntArray_Get(positions, 0);
      jint largestInc = 0;
      jint sz = positions->size_;
      for (jint i = 1; i < sz; i++) {
        jint pos = IOSIntArray_Get(positions, i);
        jint inc = pos - lastPos;
        if (inc > largestInc) {
          largestInc = inc;
        }
        lastPos = pos;
      }
      if (largestInc > 1) {
        slop += largestInc;
      }
    }
    jboolean inorder = false;
    if (slop == 0) {
      inorder = true;
    }
    OrgApacheLuceneSearchSpansSpanNearQuery *sp = new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(clauses, slop, inorder);
    [sp setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedSpanTermsWithJavaUtilMap_withOrgApacheLuceneSearchSpansSpanQuery_(self, terms, sp);
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchTermQuery class]]) {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedTermsWithJavaUtilMap_withOrgApacheLuceneSearchQuery_(self, terms, query);
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchSpansSpanQuery class]]) {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedSpanTermsWithJavaUtilMap_withOrgApacheLuceneSearchSpansSpanQuery_(self, terms, (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk(query, [OrgApacheLuceneSearchSpansSpanQuery class]));
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchFilteredQuery class]]) {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(self, [((OrgApacheLuceneSearchFilteredQuery *) nil_chk(((OrgApacheLuceneSearchFilteredQuery *) cast_chk(query, [OrgApacheLuceneSearchFilteredQuery class])))) getQuery], terms);
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchDisjunctionMaxQuery class]]) {
    for (id<JavaUtilIterator> iterator = [((OrgApacheLuceneSearchDisjunctionMaxQuery *) nil_chk(((OrgApacheLuceneSearchDisjunctionMaxQuery *) cast_chk(query, [OrgApacheLuceneSearchDisjunctionMaxQuery class])))) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
      OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(self, [iterator next], terms);
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchMultiTermQuery class]] && self->expandMultiTermQuery_) {
    OrgApacheLuceneSearchMultiTermQuery *mtq = ((OrgApacheLuceneSearchMultiTermQuery *) cast_chk(query, [OrgApacheLuceneSearchMultiTermQuery class]));
    if ([((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(mtq)) getRewriteMethod] != JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, SCORING_BOOLEAN_QUERY_REWRITE)) {
      mtq = (OrgApacheLuceneSearchMultiTermQuery *) cast_chk([mtq java_clone], [OrgApacheLuceneSearchMultiTermQuery class]);
      [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(mtq)) setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, SCORING_BOOLEAN_QUERY_REWRITE)];
      query = mtq;
    }
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader *fReader = new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_init();
    (void) [((OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *) nil_chk(JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, SCORING_BOOLEAN_QUERY_REWRITE))) rewriteWithOrgApacheLuceneIndexIndexReader:fReader withOrgApacheLuceneSearchMultiTermQuery:mtq];
    if (fReader->field_ != nil) {
      OrgApacheLuceneIndexIndexReader *ir = OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_getReaderForFieldWithNSString_(self, fReader->field_);
      OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWithOrgApacheLuceneSearchQuery_withJavaUtilMap_(self, [((OrgApacheLuceneSearchQuery *) nil_chk(query)) rewriteWithOrgApacheLuceneIndexIndexReader:ir], terms);
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]]) {
    OrgApacheLuceneSearchMultiPhraseQuery *mpq = (OrgApacheLuceneSearchMultiPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchMultiPhraseQuery class]);
    id<JavaUtilList> termArrays = [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(mpq)) getTermArrays];
    IOSIntArray *positions = [mpq getPositions];
    if (((IOSIntArray *) nil_chk(positions))->size_ > 0) {
      jint maxPosition = IOSIntArray_Get(positions, positions->size_ - 1);
      for (jint i = 0; i < positions->size_ - 1; ++i) {
        if (IOSIntArray_Get(positions, i) > maxPosition) {
          maxPosition = IOSIntArray_Get(positions, i);
        }
      }
      IOSObjectArray *disjunctLists = [IOSObjectArray newArrayWithLength:maxPosition + 1 type:JavaUtilList_class_()];
      jint distinctPositions = 0;
      for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(termArrays)) size]; ++i) {
        IOSObjectArray *termArray = [termArrays getWithInt:i];
        id<JavaUtilList> disjuncts = IOSObjectArray_Get(disjunctLists, IOSIntArray_Get(positions, i));
        if (disjuncts == nil) {
          disjuncts = (IOSObjectArray_SetAndConsume(disjunctLists, IOSIntArray_Get(positions, i), new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(termArray))->size_)));
          ++distinctPositions;
        }
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(termArray))->size_; ++j) {
          [disjuncts addWithId:new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(termArray, j))];
        }
      }
      jint positionGaps = 0;
      jint position = 0;
      IOSObjectArray *clauses = [IOSObjectArray newArrayWithLength:distinctPositions type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
      for (jint i = 0; i < disjunctLists->size_; ++i) {
        id<JavaUtilList> disjuncts = IOSObjectArray_Get(disjunctLists, i);
        if (disjuncts != nil) {
          (void) IOSObjectArray_SetAndConsume(clauses, position++, new_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_([disjuncts toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[disjuncts size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()]]));
        }
        else {
          ++positionGaps;
        }
      }
      jint slop = [mpq getSlop];
      jboolean inorder = slop == 0;
      OrgApacheLuceneSearchSpansSpanNearQuery *sp = new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(clauses, slop + positionGaps, inorder);
      [sp setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
      OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedSpanTermsWithJavaUtilMap_withOrgApacheLuceneSearchSpansSpanQuery_(self, terms, sp);
    }
  }
}

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedSpanTermsWithJavaUtilMap_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanQuery *spanQuery) {
  id<JavaUtilSet> fieldNames;
  if (self->fieldName_ == nil) {
    fieldNames = new_JavaUtilHashSet_init();
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(self, spanQuery, fieldNames);
  }
  else {
    fieldNames = new_JavaUtilHashSet_initWithInt_(1);
    [fieldNames addWithId:self->fieldName_];
  }
  if (self->defaultField_ != nil) {
    [fieldNames addWithId:self->defaultField_];
  }
  id<JavaUtilMap> queries = new_JavaUtilHashMap_init();
  id<JavaUtilSet> nonWeightedTerms = new_JavaUtilHashSet_init();
  jboolean mustRewriteQuery = OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, spanQuery);
  if (mustRewriteQuery) {
    for (NSString * __strong field in fieldNames) {
      OrgApacheLuceneSearchSpansSpanQuery *rewrittenQuery = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) rewriteWithOrgApacheLuceneIndexIndexReader:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_getReaderForFieldWithNSString_(self, field)], [OrgApacheLuceneSearchSpansSpanQuery class]);
      (void) [queries putWithId:field withId:rewrittenQuery];
      [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(rewrittenQuery)) extractTermsWithJavaUtilSet:nonWeightedTerms];
    }
  }
  else {
    [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) extractTermsWithJavaUtilSet:nonWeightedTerms];
  }
  id<JavaUtilList> spanPositions = new_JavaUtilArrayList_init();
  for (NSString * __strong field in fieldNames) {
    OrgApacheLuceneIndexIndexReader *reader = OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_getReaderForFieldWithNSString_(self, field);
    OrgApacheLuceneSearchSpansSpans *spans;
    if (mustRewriteQuery) {
      spans = [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk([queries getWithId:field])) getSpansWithOrgApacheLuceneIndexIndexReader:reader];
    }
    else {
      spans = [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) getSpansWithOrgApacheLuceneIndexIndexReader:reader];
    }
    while ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans)) next]) {
      [spanPositions addWithId:new_OrgApacheLuceneSearchHighlightPositionSpan_initWithInt_withInt_([spans start], [spans end] - 1)];
    }
  }
  if ([spanPositions size] == 0) {
    return;
  }
  for (OrgApacheLuceneIndexTerm * __strong queryTerm in nonWeightedTerms) {
    if (OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_fieldNameComparatorWithNSString_(self, [((OrgApacheLuceneIndexTerm *) nil_chk(queryTerm)) field])) {
      OrgApacheLuceneSearchHighlightWeightedSpanTerm *weightedSpanTerm = [((id<JavaUtilMap>) nil_chk(terms)) getWithId:[queryTerm text]];
      if (weightedSpanTerm == nil) {
        weightedSpanTerm = new_OrgApacheLuceneSearchHighlightWeightedSpanTerm_initWithFloat_withNSString_([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) getBoost], [queryTerm text]);
        [weightedSpanTerm addPositionSpansWithJavaUtilList:spanPositions];
        weightedSpanTerm->positionSensitive_ = true;
        (void) [terms putWithId:[queryTerm text] withId:weightedSpanTerm];
      }
      else {
        if ([spanPositions size] > 0) {
          [weightedSpanTerm addPositionSpansWithJavaUtilList:spanPositions];
        }
      }
    }
  }
}

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_extractWeightedTermsWithJavaUtilMap_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, id<JavaUtilMap> terms, OrgApacheLuceneSearchQuery *query) {
  id<JavaUtilSet> nonWeightedTerms = new_JavaUtilHashSet_init();
  [((OrgApacheLuceneSearchQuery *) nil_chk(query)) extractTermsWithJavaUtilSet:nonWeightedTerms];
  for (OrgApacheLuceneIndexTerm * __strong queryTerm in nonWeightedTerms) {
    if (OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_fieldNameComparatorWithNSString_(self, [((OrgApacheLuceneIndexTerm *) nil_chk(queryTerm)) field])) {
      OrgApacheLuceneSearchHighlightWeightedSpanTerm *weightedSpanTerm = new_OrgApacheLuceneSearchHighlightWeightedSpanTerm_initWithFloat_withNSString_([query getBoost], [queryTerm text]);
      (void) [((id<JavaUtilMap>) nil_chk(terms)) putWithId:[queryTerm text] withId:weightedSpanTerm];
    }
  }
}

jboolean OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_fieldNameComparatorWithNSString_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, NSString *fieldNameToCheck) {
  jboolean rv = self->fieldName_ == nil || fieldNameToCheck == self->fieldName_ || fieldNameToCheck == self->defaultField_;
  return rv;
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_getReaderForFieldWithNSString_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, NSString *field) {
  if (self->wrapToCaching_ && !self->cachedTokenStream_ && !([self->tokenStream_ isKindOfClass:[OrgApacheLuceneAnalysisCachingTokenFilter class]])) {
    self->tokenStream_ = new_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(new_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self->tokenStream_, self->maxDocCharsToAnalyze_));
    self->cachedTokenStream_ = true;
  }
  OrgApacheLuceneIndexIndexReader *reader = [((id<JavaUtilMap>) nil_chk(self->readers_)) getWithId:field];
  if (reader == nil) {
    OrgApacheLuceneIndexMemoryMemoryIndex *indexer = new_OrgApacheLuceneIndexMemoryMemoryIndex_init();
    [indexer addFieldWithNSString:field withOrgApacheLuceneAnalysisTokenStream:new_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self->tokenStream_, self->maxDocCharsToAnalyze_)];
    [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(self->tokenStream_)) reset];
    OrgApacheLuceneSearchIndexSearcher *searcher = [indexer createSearcher];
    reader = [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getIndexReader];
    (void) [((id<JavaUtilMap>) nil_chk(self->readers_)) putWithId:field withId:reader];
  }
  return reader;
}

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, OrgApacheLuceneSearchSpansSpanQuery *spanQuery, id<JavaUtilSet> fieldNames) {
  if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansFieldMaskingSpanQuery class]]) {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(self, [((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) nil_chk(((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansFieldMaskingSpanQuery class])))) getMaskedQuery], fieldNames);
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanFirstQuery class]]) {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(self, [((OrgApacheLuceneSearchSpansSpanFirstQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanFirstQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanFirstQuery class])))) getMatch], fieldNames);
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNearQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanNearQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanNearQuery class])))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(self, clause, fieldNames);
      }
    }
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNotQuery class]]) {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(self, [((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanNotQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanNotQuery class])))) getInclude], fieldNames);
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanOrQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanOrQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanOrQuery class])))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilSet_(self, clause, fieldNames);
      }
    }
  }
  else {
    [((id<JavaUtilSet>) nil_chk(fieldNames)) addWithId:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) getField]];
  }
}

jboolean OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, OrgApacheLuceneSearchSpansSpanQuery *spanQuery) {
  if (!self->expandMultiTermQuery_) {
    return false;
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansFieldMaskingSpanQuery class]]) {
    return OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, [((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) nil_chk(((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansFieldMaskingSpanQuery class])))) getMaskedQuery]);
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanFirstQuery class]]) {
    return OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, [((OrgApacheLuceneSearchSpansSpanFirstQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanFirstQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanFirstQuery class])))) getMatch]);
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNearQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanNearQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanNearQuery class])))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        if (OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, clause)) {
          return true;
        }
      }
    }
    return false;
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNotQuery class]]) {
    OrgApacheLuceneSearchSpansSpanNotQuery *spanNotQuery = (OrgApacheLuceneSearchSpansSpanNotQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanNotQuery class]);
    return OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, [((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(spanNotQuery)) getInclude]) || OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, [spanNotQuery getExclude]);
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanOrQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanOrQuery *) cast_chk(spanQuery, [OrgApacheLuceneSearchSpansSpanOrQuery class])))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        if (OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery_(self, clause)) {
          return true;
        }
      }
    }
    return false;
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanTermQuery class]]) {
    return false;
  }
  else {
    return true;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor)

@implementation OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(m)) entrySet])) (void) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
}

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)putWithId:(id)key
                                                       withId:(OrgApacheLuceneSearchHighlightWeightedSpanTerm *)value {
  OrgApacheLuceneSearchHighlightWeightedSpanTerm *prev = [super putWithId:key withId:value];
  if (prev == nil) return prev;
  OrgApacheLuceneSearchHighlightWeightedSpanTerm *prevTerm = prev;
  OrgApacheLuceneSearchHighlightWeightedSpanTerm *newTerm = value;
  if (!prevTerm->positionSensitive_) {
    ((OrgApacheLuceneSearchHighlightWeightedSpanTerm *) nil_chk(newTerm))->positionSensitive_ = false;
  }
  return prev;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchHighlightWeightedSpanTerm;", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putAllWithJavaUtilMap:);
  methods[2].selector = @selector(putWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "putAll", "LJavaUtilMap;", "(Ljava/util/Map<+TK;+Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;)V", "put", "LNSObject;LOrgApacheLuceneSearchHighlightWeightedSpanTerm;", "(TK;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;)Lorg/apache/lucene/search/highlight/WeightedSpanTerm;", "LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor;", "<K:Ljava/lang/Object;>Ljava/util/HashMap<TK;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap = { "PositionCheckingMap", "org.apache.lucene.search.highlight", ptrTable, methods, NULL, 7, 0xa, 3, 0, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap;
}

@end

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *self) {
  JavaUtilHashMap_init(self);
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap, init)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader)

@implementation OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexTermEnum *)termsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  if (t != nil && field_ == nil) field_ = [t field];
  return [super termsWithOrgApacheLuceneIndexTerm:t];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermEnum;", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(termsWithOrgApacheLuceneIndexTerm:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_MEMORY_INDEX_READER", "LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "terms", "LOrgApacheLuceneIndexTerm;", "LJavaIoIOException;", &OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_EMPTY_MEMORY_INDEX_READER, "LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader = { "FakeReader", "org.apache.lucene.search.highlight", ptrTable, methods, fields, 7, 0x18, 2, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader class]) {
    OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_EMPTY_MEMORY_INDEX_READER = [((OrgApacheLuceneSearchIndexSearcher *) nil_chk([new_OrgApacheLuceneIndexMemoryMemoryIndex_init() createSearcher])) getIndexReader];
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader)
  }
}

@end

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_init(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader *self) {
  OrgApacheLuceneIndexFilterIndexReader_initWithOrgApacheLuceneIndexIndexReader_(self, OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_EMPTY_MEMORY_INDEX_READER);
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader, init)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_FakeReader)
