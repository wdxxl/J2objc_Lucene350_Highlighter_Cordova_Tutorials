//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/lucene/search/DuplicateFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermDocs.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DuplicateFilter.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/util/FixedBitSet.h"

@interface OrgApacheLuceneSearchDuplicateFilter ()

- (OrgApacheLuceneUtilFixedBitSet *)correctBitsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

- (OrgApacheLuceneUtilFixedBitSet *)fastBitsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

@end

__attribute__((unused)) static OrgApacheLuceneUtilFixedBitSet *OrgApacheLuceneSearchDuplicateFilter_correctBitsWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchDuplicateFilter *self, OrgApacheLuceneIndexIndexReader *reader);

__attribute__((unused)) static OrgApacheLuceneUtilFixedBitSet *OrgApacheLuceneSearchDuplicateFilter_fastBitsWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchDuplicateFilter *self, OrgApacheLuceneIndexIndexReader *reader);

@implementation OrgApacheLuceneSearchDuplicateFilter

- (instancetype)initWithNSString:(NSString *)fieldName {
  OrgApacheLuceneSearchDuplicateFilter_initWithNSString_(self, fieldName);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fieldName
                         withInt:(jint)keepMode
                         withInt:(jint)processingMode {
  OrgApacheLuceneSearchDuplicateFilter_initWithNSString_withInt_withInt_(self, fieldName, keepMode, processingMode);
  return self;
}

- (OrgApacheLuceneSearchDocIdSet *)getDocIdSetWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if (processingMode_ == OrgApacheLuceneSearchDuplicateFilter_PM_FAST_INVALIDATION) {
    return OrgApacheLuceneSearchDuplicateFilter_fastBitsWithOrgApacheLuceneIndexIndexReader_(self, reader);
  }
  else {
    return OrgApacheLuceneSearchDuplicateFilter_correctBitsWithOrgApacheLuceneIndexIndexReader_(self, reader);
  }
}

- (OrgApacheLuceneUtilFixedBitSet *)correctBitsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneSearchDuplicateFilter_correctBitsWithOrgApacheLuceneIndexIndexReader_(self, reader);
}

- (OrgApacheLuceneUtilFixedBitSet *)fastBitsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneSearchDuplicateFilter_fastBitsWithOrgApacheLuceneIndexIndexReader_(self, reader);
}

- (NSString *)getFieldName {
  return fieldName_;
}

- (void)setFieldNameWithNSString:(NSString *)fieldName {
  self->fieldName_ = fieldName;
}

- (jint)getKeepMode {
  return keepMode_;
}

- (void)setKeepModeWithInt:(jint)keepMode {
  self->keepMode_ = keepMode;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if ((obj == nil) || ([nil_chk(obj) java_getClass] != [self java_getClass])) return false;
  OrgApacheLuceneSearchDuplicateFilter *other = (OrgApacheLuceneSearchDuplicateFilter *) cast_chk(obj, [OrgApacheLuceneSearchDuplicateFilter class]);
  return keepMode_ == ((OrgApacheLuceneSearchDuplicateFilter *) nil_chk(other))->keepMode_ && processingMode_ == other->processingMode_ && (fieldName_ == other->fieldName_ || (fieldName_ != nil && [fieldName_ isEqual:other->fieldName_]));
}

- (NSUInteger)hash {
  jint hash_ = 217;
  hash_ = 31 * hash_ + keepMode_;
  hash_ = 31 * hash_ + processingMode_;
  hash_ = 31 * hash_ + ((jint) [((NSString *) nil_chk(fieldName_)) hash]);
  return hash_;
}

- (jint)getProcessingMode {
  return processingMode_;
}

- (void)setProcessingModeWithInt:(jint)processingMode {
  self->processingMode_ = processingMode;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFixedBitSet;", 0x2, 5, 3, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFixedBitSet;", 0x2, 6, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withInt:withInt:);
  methods[2].selector = @selector(getDocIdSetWithOrgApacheLuceneIndexIndexReader:);
  methods[3].selector = @selector(correctBitsWithOrgApacheLuceneIndexIndexReader:);
  methods[4].selector = @selector(fastBitsWithOrgApacheLuceneIndexIndexReader:);
  methods[5].selector = @selector(getFieldName);
  methods[6].selector = @selector(setFieldNameWithNSString:);
  methods[7].selector = @selector(getKeepMode);
  methods[8].selector = @selector(setKeepModeWithInt:);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(getProcessingMode);
  methods[12].selector = @selector(setProcessingModeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keepMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "KM_USE_FIRST_OCCURRENCE", "I", .constantValue.asInt = OrgApacheLuceneSearchDuplicateFilter_KM_USE_FIRST_OCCURRENCE, 0x19, -1, -1, -1, -1 },
    { "KM_USE_LAST_OCCURRENCE", "I", .constantValue.asInt = OrgApacheLuceneSearchDuplicateFilter_KM_USE_LAST_OCCURRENCE, 0x19, -1, -1, -1, -1 },
    { "processingMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "PM_FULL_VALIDATION", "I", .constantValue.asInt = OrgApacheLuceneSearchDuplicateFilter_PM_FULL_VALIDATION, 0x19, -1, -1, -1, -1 },
    { "PM_FAST_INVALIDATION", "I", .constantValue.asInt = OrgApacheLuceneSearchDuplicateFilter_PM_FAST_INVALIDATION, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;II", "getDocIdSet", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "correctBits", "fastBits", "setFieldName", "setKeepMode", "I", "equals", "LNSObject;", "hashCode", "setProcessingMode" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchDuplicateFilter = { "DuplicateFilter", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 13, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchDuplicateFilter;
}

@end

void OrgApacheLuceneSearchDuplicateFilter_initWithNSString_(OrgApacheLuceneSearchDuplicateFilter *self, NSString *fieldName) {
  OrgApacheLuceneSearchDuplicateFilter_initWithNSString_withInt_withInt_(self, fieldName, OrgApacheLuceneSearchDuplicateFilter_KM_USE_LAST_OCCURRENCE, OrgApacheLuceneSearchDuplicateFilter_PM_FULL_VALIDATION);
}

OrgApacheLuceneSearchDuplicateFilter *new_OrgApacheLuceneSearchDuplicateFilter_initWithNSString_(NSString *fieldName) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchDuplicateFilter, initWithNSString_, fieldName)
}

OrgApacheLuceneSearchDuplicateFilter *create_OrgApacheLuceneSearchDuplicateFilter_initWithNSString_(NSString *fieldName) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchDuplicateFilter, initWithNSString_, fieldName)
}

void OrgApacheLuceneSearchDuplicateFilter_initWithNSString_withInt_withInt_(OrgApacheLuceneSearchDuplicateFilter *self, NSString *fieldName, jint keepMode, jint processingMode) {
  OrgApacheLuceneSearchFilter_init(self);
  self->keepMode_ = OrgApacheLuceneSearchDuplicateFilter_KM_USE_FIRST_OCCURRENCE;
  self->processingMode_ = OrgApacheLuceneSearchDuplicateFilter_PM_FULL_VALIDATION;
  self->fieldName_ = fieldName;
  self->keepMode_ = keepMode;
  self->processingMode_ = processingMode;
}

OrgApacheLuceneSearchDuplicateFilter *new_OrgApacheLuceneSearchDuplicateFilter_initWithNSString_withInt_withInt_(NSString *fieldName, jint keepMode, jint processingMode) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchDuplicateFilter, initWithNSString_withInt_withInt_, fieldName, keepMode, processingMode)
}

OrgApacheLuceneSearchDuplicateFilter *create_OrgApacheLuceneSearchDuplicateFilter_initWithNSString_withInt_withInt_(NSString *fieldName, jint keepMode, jint processingMode) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchDuplicateFilter, initWithNSString_withInt_withInt_, fieldName, keepMode, processingMode)
}

OrgApacheLuceneUtilFixedBitSet *OrgApacheLuceneSearchDuplicateFilter_correctBitsWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchDuplicateFilter *self, OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneUtilFixedBitSet *bits = new_OrgApacheLuceneUtilFixedBitSet_initWithInt_([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) maxDoc]);
  OrgApacheLuceneIndexTerm *startTerm = new_OrgApacheLuceneIndexTerm_initWithNSString_(self->fieldName_);
  OrgApacheLuceneIndexTermEnum *te = [reader termsWithOrgApacheLuceneIndexTerm:startTerm];
  if (te != nil) {
    OrgApacheLuceneIndexTerm *currTerm = [te term];
    while ((currTerm != nil) && ([((OrgApacheLuceneIndexTerm *) nil_chk(currTerm)) field] == [startTerm field])) {
      jint lastDoc = -1;
      id<OrgApacheLuceneIndexTermDocs> td = [reader termDocsWithOrgApacheLuceneIndexTerm:currTerm];
      if ([((id<OrgApacheLuceneIndexTermDocs>) nil_chk(td)) next]) {
        if (self->keepMode_ == OrgApacheLuceneSearchDuplicateFilter_KM_USE_FIRST_OCCURRENCE) {
          [bits setWithInt:[td doc]];
        }
        else {
          do {
            lastDoc = [td doc];
          }
          while ([td next]);
          [bits setWithInt:lastDoc];
        }
      }
      if (![te next]) {
        break;
      }
      currTerm = [te term];
    }
  }
  return bits;
}

OrgApacheLuceneUtilFixedBitSet *OrgApacheLuceneSearchDuplicateFilter_fastBitsWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchDuplicateFilter *self, OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneUtilFixedBitSet *bits = new_OrgApacheLuceneUtilFixedBitSet_initWithInt_([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) maxDoc]);
  [bits setWithInt:0 withInt:[reader maxDoc]];
  OrgApacheLuceneIndexTerm *startTerm = new_OrgApacheLuceneIndexTerm_initWithNSString_(self->fieldName_);
  OrgApacheLuceneIndexTermEnum *te = [reader termsWithOrgApacheLuceneIndexTerm:startTerm];
  if (te != nil) {
    OrgApacheLuceneIndexTerm *currTerm = [te term];
    while ((currTerm != nil) && ([((OrgApacheLuceneIndexTerm *) nil_chk(currTerm)) field] == [startTerm field])) {
      if ([te docFreq] > 1) {
        jint lastDoc = -1;
        id<OrgApacheLuceneIndexTermDocs> td = [reader termDocsWithOrgApacheLuceneIndexTerm:currTerm];
        [((id<OrgApacheLuceneIndexTermDocs>) nil_chk(td)) next];
        if (self->keepMode_ == OrgApacheLuceneSearchDuplicateFilter_KM_USE_FIRST_OCCURRENCE) {
          [td next];
        }
        do {
          lastDoc = [td doc];
          [bits clearWithInt:lastDoc];
        }
        while ([td next]);
        if (self->keepMode_ == OrgApacheLuceneSearchDuplicateFilter_KM_USE_LAST_OCCURRENCE) {
          [bits setWithInt:lastDoc];
        }
      }
      if (![te next]) {
        break;
      }
      currTerm = [te term];
    }
  }
  return bits;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchDuplicateFilter)
