//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/lucene/search/regex/JakartaRegexpCapabilities.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "org/apache/lucene/search/regex/JakartaRegexpCapabilities.h"
#include "org/apache/regexp/RE.h"
#include "org/apache/regexp/REProgram.h"

@interface OrgApacheLuceneSearchRegexJakartaRegexpCapabilities () {
 @public
  OrgApacheRegexpRE *regexp_;
  jint flags_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities, regexp_, OrgApacheRegexpRE *)

inline JavaLangReflectField *OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_get_prefixField();
inline JavaLangReflectField *OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_set_prefixField(JavaLangReflectField *value);
static JavaLangReflectField *OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_prefixField;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities, prefixField, JavaLangReflectField *)

inline JavaLangReflectMethod *OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_get_getPrefixMethod();
inline JavaLangReflectMethod *OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_set_getPrefixMethod(JavaLangReflectMethod *value);
static JavaLangReflectMethod *OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_getPrefixMethod;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities, getPrefixMethod, JavaLangReflectMethod *)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities)

@implementation OrgApacheLuceneSearchRegexJakartaRegexpCapabilities

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)flags {
  OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_initWithInt_(self, flags);
  return self;
}

- (void)compileWithNSString:(NSString *)pattern {
  regexp_ = new_OrgApacheRegexpRE_initWithNSString_withInt_(pattern, self->flags_);
}

- (jboolean)matchWithNSString:(NSString *)string {
  return [((OrgApacheRegexpRE *) nil_chk(regexp_)) matchWithNSString:string];
}

- (NSString *)prefix {
  @try {
    IOSCharArray *prefix;
    if (OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_getPrefixMethod != nil) {
      prefix = (IOSCharArray *) cast_chk([OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_getPrefixMethod invokeWithId:[((OrgApacheRegexpRE *) nil_chk(regexp_)) getProgram] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]], [IOSCharArray class]);
    }
    else if (OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_prefixField != nil) {
      prefix = (IOSCharArray *) cast_chk([OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_prefixField getWithId:[((OrgApacheRegexpRE *) nil_chk(regexp_)) getProgram]], [IOSCharArray class]);
    }
    else {
      return nil;
    }
    return prefix == nil ? nil : [NSString java_stringWithCharacters:prefix];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *that = (OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *) cast_chk(o, [OrgApacheLuceneSearchRegexJakartaRegexpCapabilities class]);
  if (regexp_ != nil ? ![regexp_ isEqual:that->regexp_] : that->regexp_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  return (regexp_ != nil ? ((jint) [regexp_ hash]) : 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(compileWithNSString:);
  methods[3].selector = @selector(matchWithNSString:);
  methods[4].selector = @selector(prefix);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "regexp_", "LOrgApacheRegexpRE;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prefixField", "LJavaLangReflectField;", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "getPrefixMethod", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FLAG_MATCH_NORMAL", "I", .constantValue.asInt = OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_FLAG_MATCH_NORMAL, 0x19, -1, -1, -1, -1 },
    { "FLAG_MATCH_CASEINDEPENDENT", "I", .constantValue.asInt = OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_FLAG_MATCH_CASEINDEPENDENT, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "compile", "LNSString;", "match", "equals", "LNSObject;", "hashCode", &OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_prefixField, &OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_getPrefixMethod };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchRegexJakartaRegexpCapabilities = { "JakartaRegexpCapabilities", "org.apache.lucene.search.regex", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchRegexJakartaRegexpCapabilities;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchRegexJakartaRegexpCapabilities class]) {
    {
      @try {
        OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_getPrefixMethod = [OrgApacheRegexpREProgram_class_() getMethod:@"getPrefix" parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
      }
      @catch (JavaLangException *e) {
        OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_getPrefixMethod = nil;
      }
      @try {
        OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_prefixField = [OrgApacheRegexpREProgram_class_() getDeclaredField:@"prefix"];
        [((JavaLangReflectField *) nil_chk(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_prefixField)) setAccessibleWithBoolean:true];
      }
      @catch (JavaLangException *e) {
        OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_prefixField = nil;
      }
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities)
  }
}

@end

void OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_init(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *self) {
  NSObject_init(self);
  self->flags_ = OrgApacheRegexpRE_MATCH_NORMAL;
}

OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *new_OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities, init)
}

OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *create_OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities, init)
}

void OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_initWithInt_(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *self, jint flags) {
  NSObject_init(self);
  self->flags_ = OrgApacheRegexpRE_MATCH_NORMAL;
  self->flags_ = flags;
}

OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *new_OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_initWithInt_(jint flags) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities, initWithInt_, flags)
}

OrgApacheLuceneSearchRegexJakartaRegexpCapabilities *create_OrgApacheLuceneSearchRegexJakartaRegexpCapabilities_initWithInt_(jint flags) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities, initWithInt_, flags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchRegexJakartaRegexpCapabilities)
