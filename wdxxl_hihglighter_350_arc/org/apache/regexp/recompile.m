//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/recompile.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "org/apache/regexp/RECompiler.h"
#include "org/apache/regexp/REProgram.h"
#include "org/apache/regexp/RESyntaxException.h"
#include "org/apache/regexp/recompile.h"

@implementation OrgApacheRegexprecompile

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheRegexprecompile_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)arg {
  OrgApacheRegexprecompile_mainWithNSStringArray_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgApacheRegexprecompile = { "recompile", "org.apache.regexp", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexprecompile;
}

@end

void OrgApacheRegexprecompile_init(OrgApacheRegexprecompile *self) {
  NSObject_init(self);
}

OrgApacheRegexprecompile *new_OrgApacheRegexprecompile_init() {
  J2OBJC_NEW_IMPL(OrgApacheRegexprecompile, init)
}

OrgApacheRegexprecompile *create_OrgApacheRegexprecompile_init() {
  J2OBJC_CREATE_IMPL(OrgApacheRegexprecompile, init)
}

void OrgApacheRegexprecompile_mainWithNSStringArray_(IOSObjectArray *arg) {
  OrgApacheRegexprecompile_initialize();
  OrgApacheRegexpRECompiler *r = new_OrgApacheRegexpRECompiler_init();
  if (((IOSObjectArray *) nil_chk(arg))->size_ <= 0 || arg->size_ % 2 != 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: recompile <patternname> <pattern>"];
    JavaLangSystem_exitWithInt_(0);
  }
  for (jint i = 0; i < arg->size_; i += 2) {
    @try {
      NSString *name = IOSObjectArray_Get(arg, i);
      NSString *pattern = IOSObjectArray_Get(arg, i + 1);
      NSString *instructions = JreStrcat("$$", name, @"PatternInstructions");
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$$$$$", @"\n    // Pre-compiled regular expression '", pattern, @"'\n    private static char[] ", instructions, @" = \n    {")];
      OrgApacheRegexpREProgram *program = [r compileWithNSString:pattern];
      jint numColumns = 7;
      IOSCharArray *p = [((OrgApacheRegexpREProgram *) nil_chk(program)) getInstructions];
      for (jint j = 0; j < ((IOSCharArray *) nil_chk(p))->size_; j++) {
        if ((j % numColumns) == 0) {
          [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"\n        "];
        }
        NSString *hex = JavaLangInteger_toHexStringWithInt_(IOSCharArray_Get(p, j));
        while ([((NSString *) nil_chk(hex)) java_length] < 4) {
          hex = JreStrcat("C$", '0', hex);
        }
        [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("$$$", @"0x", hex, @", ")];
      }
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"\n    };"];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$$", @"\n    private static RE ", name, @"Pattern = new RE(new REProgram(", instructions, @"));")];
    }
    @catch (OrgApacheRegexpRESyntaxException *e) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$", @"Syntax error in expression \"", IOSObjectArray_Get(arg, i), @"\": ", [e description])];
    }
    @catch (JavaLangException *e) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"Unexpected exception: ", [e description])];
    }
    @catch (JavaLangError *e) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"Internal error: ", [e description])];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexprecompile)
