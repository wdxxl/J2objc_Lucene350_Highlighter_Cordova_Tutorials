//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/REProgram.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/regexp/RE.h"
#include "org/apache/regexp/REProgram.h"

@implementation OrgApacheRegexpREProgram

- (instancetype)initWithCharArray:(IOSCharArray *)instruction {
  OrgApacheRegexpREProgram_initWithCharArray_(self, instruction);
  return self;
}

- (instancetype)initWithInt:(jint)parens
              withCharArray:(IOSCharArray *)instruction {
  OrgApacheRegexpREProgram_initWithInt_withCharArray_(self, parens, instruction);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)instruction
                          withInt:(jint)lenInstruction {
  OrgApacheRegexpREProgram_initWithCharArray_withInt_(self, instruction, lenInstruction);
  return self;
}

- (IOSCharArray *)getInstructions {
  if (lenInstruction_ != 0) {
    IOSCharArray *ret = [IOSCharArray newArrayWithLength:lenInstruction_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(instruction_, 0, ret, 0, lenInstruction_);
    return ret;
  }
  return nil;
}

- (void)setInstructionsWithCharArray:(IOSCharArray *)instruction
                             withInt:(jint)lenInstruction {
  self->instruction_ = instruction;
  self->lenInstruction_ = lenInstruction;
  flags_ = 0;
  prefix_ = nil;
  if (instruction != nil && lenInstruction != 0) {
    if (lenInstruction >= OrgApacheRegexpRE_nodeSize && IOSCharArray_Get(instruction, 0 + OrgApacheRegexpRE_offsetOpcode) == OrgApacheRegexpRE_OP_BRANCH) {
      jchar next = IOSCharArray_Get(instruction, 0 + OrgApacheRegexpRE_offsetNext);
      if (IOSCharArray_Get(instruction, next + OrgApacheRegexpRE_offsetOpcode) == OrgApacheRegexpRE_OP_END && lenInstruction >= (OrgApacheRegexpRE_nodeSize * 2)) {
        jchar nextOp = IOSCharArray_Get(instruction, OrgApacheRegexpRE_nodeSize + OrgApacheRegexpRE_offsetOpcode);
        if (nextOp == OrgApacheRegexpRE_OP_ATOM) {
          jint lenAtom = IOSCharArray_Get(instruction, OrgApacheRegexpRE_nodeSize + OrgApacheRegexpRE_offsetOpdata);
          prefix_ = [IOSCharArray newArrayWithLength:lenAtom];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(instruction, OrgApacheRegexpRE_nodeSize * 2, prefix_, 0, lenAtom);
        }
        else if (nextOp == OrgApacheRegexpRE_OP_BOL) {
          flags_ |= OrgApacheRegexpREProgram_OPT_HASBOL;
        }
      }
    }
    for (jint i = 0; i < lenInstruction; i += OrgApacheRegexpRE_nodeSize) {
      switch (IOSCharArray_Get(instruction, i + OrgApacheRegexpRE_offsetOpcode)) {
        case OrgApacheRegexpRE_OP_ANYOF:
        i += (IOSCharArray_Get(instruction, i + OrgApacheRegexpRE_offsetOpdata) * 2);
        break;
        case OrgApacheRegexpRE_OP_ATOM:
        i += IOSCharArray_Get(instruction, i + OrgApacheRegexpRE_offsetOpdata);
        break;
        case OrgApacheRegexpRE_OP_BACKREF:
        flags_ |= OrgApacheRegexpREProgram_OPT_HASBACKREFS;
        goto break_BackrefScanLoop;
      }
    }
    break_BackrefScanLoop: ;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(initWithInt:withCharArray:);
  methods[2].selector = @selector(initWithCharArray:withInt:);
  methods[3].selector = @selector(getInstructions);
  methods[4].selector = @selector(setInstructionsWithCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OPT_HASBACKREFS", "I", .constantValue.asInt = OrgApacheRegexpREProgram_OPT_HASBACKREFS, 0x18, -1, -1, -1, -1 },
    { "OPT_HASBOL", "I", .constantValue.asInt = OrgApacheRegexpREProgram_OPT_HASBOL, 0x18, -1, -1, -1, -1 },
    { "instruction_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lenInstruction_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "prefix_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxParens_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C", "I[C", "[CI", "setInstructions" };
  static const J2ObjcClassInfo _OrgApacheRegexpREProgram = { "REProgram", "org.apache.regexp", ptrTable, methods, fields, 7, 0x1, 5, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpREProgram;
}

@end

void OrgApacheRegexpREProgram_initWithCharArray_(OrgApacheRegexpREProgram *self, IOSCharArray *instruction) {
  OrgApacheRegexpREProgram_initWithCharArray_withInt_(self, instruction, ((IOSCharArray *) nil_chk(instruction))->size_);
}

OrgApacheRegexpREProgram *new_OrgApacheRegexpREProgram_initWithCharArray_(IOSCharArray *instruction) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpREProgram, initWithCharArray_, instruction)
}

OrgApacheRegexpREProgram *create_OrgApacheRegexpREProgram_initWithCharArray_(IOSCharArray *instruction) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpREProgram, initWithCharArray_, instruction)
}

void OrgApacheRegexpREProgram_initWithInt_withCharArray_(OrgApacheRegexpREProgram *self, jint parens, IOSCharArray *instruction) {
  OrgApacheRegexpREProgram_initWithCharArray_withInt_(self, instruction, ((IOSCharArray *) nil_chk(instruction))->size_);
  self->maxParens_ = parens;
}

OrgApacheRegexpREProgram *new_OrgApacheRegexpREProgram_initWithInt_withCharArray_(jint parens, IOSCharArray *instruction) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpREProgram, initWithInt_withCharArray_, parens, instruction)
}

OrgApacheRegexpREProgram *create_OrgApacheRegexpREProgram_initWithInt_withCharArray_(jint parens, IOSCharArray *instruction) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpREProgram, initWithInt_withCharArray_, parens, instruction)
}

void OrgApacheRegexpREProgram_initWithCharArray_withInt_(OrgApacheRegexpREProgram *self, IOSCharArray *instruction, jint lenInstruction) {
  NSObject_init(self);
  self->maxParens_ = -1;
  [self setInstructionsWithCharArray:instruction withInt:lenInstruction];
}

OrgApacheRegexpREProgram *new_OrgApacheRegexpREProgram_initWithCharArray_withInt_(IOSCharArray *instruction, jint lenInstruction) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpREProgram, initWithCharArray_withInt_, instruction, lenInstruction)
}

OrgApacheRegexpREProgram *create_OrgApacheRegexpREProgram_initWithCharArray_withInt_(IOSCharArray *instruction, jint lenInstruction) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpREProgram, initWithCharArray_withInt_, instruction, lenInstruction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpREProgram)
