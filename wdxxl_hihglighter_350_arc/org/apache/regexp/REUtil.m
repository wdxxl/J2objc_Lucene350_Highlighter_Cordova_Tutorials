//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/REUtil.java
//

#include "J2ObjC_source.h"
#include "org/apache/regexp/RE.h"
#include "org/apache/regexp/REUtil.h"

inline NSString *OrgApacheRegexpREUtil_get_complexPrefix();
static NSString *OrgApacheRegexpREUtil_complexPrefix = @"complex:";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheRegexpREUtil, complexPrefix, NSString *)

@implementation OrgApacheRegexpREUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheRegexpREUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgApacheRegexpRE *)createREWithNSString:(NSString *)expression
                                    withInt:(jint)matchFlags {
  return OrgApacheRegexpREUtil_createREWithNSString_withInt_(expression, matchFlags);
}

+ (OrgApacheRegexpRE *)createREWithNSString:(NSString *)expression {
  return OrgApacheRegexpREUtil_createREWithNSString_(expression);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheRegexpRE;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheRegexpRE;", 0x9, 0, 3, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createREWithNSString:withInt:);
  methods[2].selector = @selector(createREWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "complexPrefix", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "createRE", "LNSString;I", "LOrgApacheRegexpRESyntaxException;", "LNSString;", &OrgApacheRegexpREUtil_complexPrefix };
  static const J2ObjcClassInfo _OrgApacheRegexpREUtil = { "REUtil", "org.apache.regexp", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpREUtil;
}

@end

void OrgApacheRegexpREUtil_init(OrgApacheRegexpREUtil *self) {
  NSObject_init(self);
}

OrgApacheRegexpREUtil *new_OrgApacheRegexpREUtil_init() {
  J2OBJC_NEW_IMPL(OrgApacheRegexpREUtil, init)
}

OrgApacheRegexpREUtil *create_OrgApacheRegexpREUtil_init() {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpREUtil, init)
}

OrgApacheRegexpRE *OrgApacheRegexpREUtil_createREWithNSString_withInt_(NSString *expression, jint matchFlags) {
  OrgApacheRegexpREUtil_initialize();
  if ([((NSString *) nil_chk(expression)) java_hasPrefix:OrgApacheRegexpREUtil_complexPrefix]) {
    return new_OrgApacheRegexpRE_initWithNSString_withInt_([expression java_substring:[((NSString *) nil_chk(OrgApacheRegexpREUtil_complexPrefix)) java_length]], matchFlags);
  }
  return new_OrgApacheRegexpRE_initWithNSString_withInt_(OrgApacheRegexpRE_simplePatternToFullRegularExpressionWithNSString_(expression), matchFlags);
}

OrgApacheRegexpRE *OrgApacheRegexpREUtil_createREWithNSString_(NSString *expression) {
  OrgApacheRegexpREUtil_initialize();
  return OrgApacheRegexpREUtil_createREWithNSString_withInt_(expression, OrgApacheRegexpRE_MATCH_NORMAL);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpREUtil)
