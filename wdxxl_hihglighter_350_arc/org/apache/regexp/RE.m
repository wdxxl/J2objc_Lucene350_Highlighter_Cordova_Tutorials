//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/RE.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Error.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Vector.h"
#include "org/apache/regexp/CharacterIterator.h"
#include "org/apache/regexp/RE.h"
#include "org/apache/regexp/RECompiler.h"
#include "org/apache/regexp/REProgram.h"
#include "org/apache/regexp/StringCharacterIterator.h"

@interface OrgApacheRegexpRE ()

- (void)allocParens OBJC_METHOD_FAMILY_NONE;

- (jboolean)isNewlineWithInt:(jint)i;

- (jint)compareCharsWithChar:(jchar)c1
                    withChar:(jchar)c2
                 withBoolean:(jboolean)caseIndependent;

@end

__attribute__((unused)) static jint OrgApacheRegexpRE_getParenStartWithInt_(OrgApacheRegexpRE *self, jint which);

__attribute__((unused)) static jint OrgApacheRegexpRE_getParenEndWithInt_(OrgApacheRegexpRE *self, jint which);

__attribute__((unused)) static void OrgApacheRegexpRE_setParenStartWithInt_withInt_(OrgApacheRegexpRE *self, jint which, jint i);

__attribute__((unused)) static void OrgApacheRegexpRE_setParenEndWithInt_withInt_(OrgApacheRegexpRE *self, jint which, jint i);

__attribute__((unused)) static void OrgApacheRegexpRE_allocParens(OrgApacheRegexpRE *self);

__attribute__((unused)) static jboolean OrgApacheRegexpRE_isNewlineWithInt_(OrgApacheRegexpRE *self, jint i);

__attribute__((unused)) static jint OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(OrgApacheRegexpRE *self, jchar c1, jchar c2, jboolean caseIndependent);

@implementation OrgApacheRegexpRE

- (instancetype)initWithNSString:(NSString *)pattern {
  OrgApacheRegexpRE_initWithNSString_(self, pattern);
  return self;
}

- (instancetype)initWithNSString:(NSString *)pattern
                         withInt:(jint)matchFlags {
  OrgApacheRegexpRE_initWithNSString_withInt_(self, pattern, matchFlags);
  return self;
}

- (instancetype)initWithOrgApacheRegexpREProgram:(OrgApacheRegexpREProgram *)program
                                         withInt:(jint)matchFlags {
  OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_withInt_(self, program, matchFlags);
  return self;
}

- (instancetype)initWithOrgApacheRegexpREProgram:(OrgApacheRegexpREProgram *)program {
  OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_(self, program);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheRegexpRE_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)simplePatternToFullRegularExpressionWithNSString:(NSString *)pattern {
  return OrgApacheRegexpRE_simplePatternToFullRegularExpressionWithNSString_(pattern);
}

- (void)setMatchFlagsWithInt:(jint)matchFlags {
  self->matchFlags_ = matchFlags;
}

- (jint)getMatchFlags {
  return matchFlags_;
}

- (void)setProgramWithOrgApacheRegexpREProgram:(OrgApacheRegexpREProgram *)program {
  self->program_ = program;
  if (program != nil && program->maxParens_ != -1) {
    self->maxParen_ = program->maxParens_;
  }
  else {
    self->maxParen_ = OrgApacheRegexpRE_MAX_PAREN;
  }
}

- (OrgApacheRegexpREProgram *)getProgram {
  return program_;
}

- (jint)getParenCount {
  return parenCount_;
}

- (NSString *)getParenWithInt:(jint)which {
  jint start;
  if (which < parenCount_ && (start = OrgApacheRegexpRE_getParenStartWithInt_(self, which)) >= 0) {
    return [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) substringWithInt:start withInt:OrgApacheRegexpRE_getParenEndWithInt_(self, which)];
  }
  return nil;
}

- (jint)getParenStartWithInt:(jint)which {
  return OrgApacheRegexpRE_getParenStartWithInt_(self, which);
}

- (jint)getParenEndWithInt:(jint)which {
  return OrgApacheRegexpRE_getParenEndWithInt_(self, which);
}

- (jint)getParenLengthWithInt:(jint)which {
  if (which < parenCount_) {
    return OrgApacheRegexpRE_getParenEndWithInt_(self, which) - OrgApacheRegexpRE_getParenStartWithInt_(self, which);
  }
  return -1;
}

- (void)setParenStartWithInt:(jint)which
                     withInt:(jint)i {
  OrgApacheRegexpRE_setParenStartWithInt_withInt_(self, which, i);
}

- (void)setParenEndWithInt:(jint)which
                   withInt:(jint)i {
  OrgApacheRegexpRE_setParenEndWithInt_withInt_(self, which, i);
}

- (void)internalErrorWithNSString:(NSString *)s {
  @throw new_JavaLangError_initWithNSString_(JreStrcat("$$", @"RE internal error: ", s));
}

- (void)allocParens {
  OrgApacheRegexpRE_allocParens(self);
}

- (jint)matchNodesWithInt:(jint)firstNode
                  withInt:(jint)lastNode
                  withInt:(jint)idxStart {
  jint idx = idxStart;
  jint next;
  jint opcode;
  jint opdata;
  jint idxNew;
  IOSCharArray *instruction = ((OrgApacheRegexpREProgram *) nil_chk(program_))->instruction_;
  for (jint node = firstNode; node < lastNode; ) {
    opcode = IOSCharArray_Get(nil_chk(instruction), node + OrgApacheRegexpRE_offsetOpcode);
    next = node + (jshort) IOSCharArray_Get(instruction, node + OrgApacheRegexpRE_offsetNext);
    opdata = IOSCharArray_Get(instruction, node + OrgApacheRegexpRE_offsetOpdata);
    switch (opcode) {
      case OrgApacheRegexpRE_OP_RELUCTANTMAYBE:
      {
        jint once = 0;
        do {
          if ((idxNew = [self matchNodesWithInt:next withInt:OrgApacheRegexpRE_maxNode withInt:idx]) != -1) {
            return idxNew;
          }
        }
        while ((once++ == 0) && (idx = [self matchNodesWithInt:node + OrgApacheRegexpRE_nodeSize withInt:next withInt:idx]) != -1);
        return -1;
      }
      case OrgApacheRegexpRE_OP_RELUCTANTPLUS:
      while ((idx = [self matchNodesWithInt:node + OrgApacheRegexpRE_nodeSize withInt:next withInt:idx]) != -1) {
        if ((idxNew = [self matchNodesWithInt:next withInt:OrgApacheRegexpRE_maxNode withInt:idx]) != -1) {
          return idxNew;
        }
      }
      return -1;
      case OrgApacheRegexpRE_OP_RELUCTANTSTAR:
      do {
        if ((idxNew = [self matchNodesWithInt:next withInt:OrgApacheRegexpRE_maxNode withInt:idx]) != -1) {
          return idxNew;
        }
      }
      while ((idx = [self matchNodesWithInt:node + OrgApacheRegexpRE_nodeSize withInt:next withInt:idx]) != -1);
      return -1;
      case OrgApacheRegexpRE_OP_OPEN:
      if ((((OrgApacheRegexpREProgram *) nil_chk(program_))->flags_ & OrgApacheRegexpREProgram_OPT_HASBACKREFS) != 0) {
        *IOSIntArray_GetRef(nil_chk(startBackref_), opdata) = idx;
      }
      if ((idxNew = [self matchNodesWithInt:next withInt:OrgApacheRegexpRE_maxNode withInt:idx]) != -1) {
        if ((opdata + 1) > parenCount_) {
          parenCount_ = opdata + 1;
        }
        if (OrgApacheRegexpRE_getParenStartWithInt_(self, opdata) == -1) {
          OrgApacheRegexpRE_setParenStartWithInt_withInt_(self, opdata, idx);
        }
      }
      return idxNew;
      case OrgApacheRegexpRE_OP_CLOSE:
      if ((((OrgApacheRegexpREProgram *) nil_chk(program_))->flags_ & OrgApacheRegexpREProgram_OPT_HASBACKREFS) != 0) {
        *IOSIntArray_GetRef(nil_chk(endBackref_), opdata) = idx;
      }
      if ((idxNew = [self matchNodesWithInt:next withInt:OrgApacheRegexpRE_maxNode withInt:idx]) != -1) {
        if ((opdata + 1) > parenCount_) {
          parenCount_ = opdata + 1;
        }
        if (OrgApacheRegexpRE_getParenEndWithInt_(self, opdata) == -1) {
          OrgApacheRegexpRE_setParenEndWithInt_withInt_(self, opdata, idx);
        }
      }
      return idxNew;
      case OrgApacheRegexpRE_OP_OPEN_CLUSTER:
      case OrgApacheRegexpRE_OP_CLOSE_CLUSTER:
      return [self matchNodesWithInt:next withInt:OrgApacheRegexpRE_maxNode withInt:idx];
      case OrgApacheRegexpRE_OP_BACKREF:
      {
        jint s = IOSIntArray_Get(nil_chk(startBackref_), opdata);
        jint e = IOSIntArray_Get(nil_chk(endBackref_), opdata);
        if (s == -1 || e == -1) {
          return -1;
        }
        if (s == e) {
          break;
        }
        jint l = e - s;
        if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx + l - 1]) {
          return -1;
        }
        jboolean caseFold = ((matchFlags_ & OrgApacheRegexpRE_MATCH_CASEINDEPENDENT) != 0);
        for (jint i = 0; i < l; i++) {
          if (OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(self, [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx++], [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:s + i], caseFold) != 0) {
            return -1;
          }
        }
      }
      break;
      case OrgApacheRegexpRE_OP_BOL:
      if (idx != 0) {
        if ((matchFlags_ & OrgApacheRegexpRE_MATCH_MULTILINE) == OrgApacheRegexpRE_MATCH_MULTILINE) {
          if (idx <= 0 || !OrgApacheRegexpRE_isNewlineWithInt_(self, idx - 1)) {
            return -1;
          }
          else {
            break;
          }
        }
        return -1;
      }
      break;
      case OrgApacheRegexpRE_OP_EOL:
      if (![((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:0] && ![((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx]) {
        if ((matchFlags_ & OrgApacheRegexpRE_MATCH_MULTILINE) == OrgApacheRegexpRE_MATCH_MULTILINE) {
          if (!OrgApacheRegexpRE_isNewlineWithInt_(self, idx)) {
            return -1;
          }
          else {
            break;
          }
        }
        return -1;
      }
      break;
      case OrgApacheRegexpRE_OP_ESCAPE:
      {
        jchar c;
        switch (opdata) {
          case OrgApacheRegexpRE_E_NBOUND:
          case OrgApacheRegexpRE_E_BOUND:
          {
            jchar cLast = ((idx == 0) ? 0x000a : [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx - 1]);
            jchar cNext = (([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx]) ? 0x000a : [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx]);
            if ((JavaLangCharacter_isLetterOrDigitWithChar_(cLast) == JavaLangCharacter_isLetterOrDigitWithChar_(cNext)) == (opdata == OrgApacheRegexpRE_E_BOUND)) {
              return -1;
            }
          }
          break;
          case OrgApacheRegexpRE_E_ALNUM:
          case OrgApacheRegexpRE_E_NALNUM:
          case OrgApacheRegexpRE_E_DIGIT:
          case OrgApacheRegexpRE_E_NDIGIT:
          case OrgApacheRegexpRE_E_SPACE:
          case OrgApacheRegexpRE_E_NSPACE:
          if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx]) {
            return -1;
          }
          c = [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx];
          switch (opdata) {
            case OrgApacheRegexpRE_E_ALNUM:
            case OrgApacheRegexpRE_E_NALNUM:
            if (!((JavaLangCharacter_isLetterOrDigitWithChar_(c) || c == '_') == (opdata == OrgApacheRegexpRE_E_ALNUM))) {
              return -1;
            }
            break;
            case OrgApacheRegexpRE_E_DIGIT:
            case OrgApacheRegexpRE_E_NDIGIT:
            if (!(JavaLangCharacter_isDigitWithChar_(c) == (opdata == OrgApacheRegexpRE_E_DIGIT))) {
              return -1;
            }
            break;
            case OrgApacheRegexpRE_E_SPACE:
            case OrgApacheRegexpRE_E_NSPACE:
            if (!(JavaLangCharacter_isWhitespaceWithChar_(c) == (opdata == OrgApacheRegexpRE_E_SPACE))) {
              return -1;
            }
            break;
          }
          idx++;
          break;
          default:
          [self internalErrorWithNSString:JreStrcat("$IC", @"Unrecognized escape '", opdata, '\'')];
        }
      }
      break;
      case OrgApacheRegexpRE_OP_ANY:
      if ((matchFlags_ & OrgApacheRegexpRE_MATCH_SINGLELINE) == OrgApacheRegexpRE_MATCH_SINGLELINE) {
        if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx]) {
          return -1;
        }
      }
      else {
        if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx] || OrgApacheRegexpRE_isNewlineWithInt_(self, idx)) {
          return -1;
        }
      }
      idx++;
      break;
      case OrgApacheRegexpRE_OP_ATOM:
      {
        if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx]) {
          return -1;
        }
        jint lenAtom = opdata;
        jint startAtom = node + OrgApacheRegexpRE_nodeSize;
        if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:lenAtom + idx - 1]) {
          return -1;
        }
        jboolean caseFold = ((matchFlags_ & OrgApacheRegexpRE_MATCH_CASEINDEPENDENT) != 0);
        for (jint i = 0; i < lenAtom; i++) {
          if (OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(self, [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx++], IOSCharArray_Get(instruction, startAtom + i), caseFold) != 0) {
            return -1;
          }
        }
      }
      break;
      case OrgApacheRegexpRE_OP_POSIXCLASS:
      {
        if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx]) {
          return -1;
        }
        switch (opdata) {
          case OrgApacheRegexpRE_POSIX_CLASS_ALNUM:
          if (!JavaLangCharacter_isLetterOrDigitWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_ALPHA:
          if (!JavaLangCharacter_isLetterWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_DIGIT:
          if (!JavaLangCharacter_isDigitWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_BLANK:
          if (!JavaLangCharacter_isSpaceCharWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_SPACE:
          if (!JavaLangCharacter_isWhitespaceWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_CNTRL:
          if (JavaLangCharacter_getTypeWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx]) != JavaLangCharacter_CONTROL) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_GRAPH:
          switch (JavaLangCharacter_getTypeWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            case JavaLangCharacter_MATH_SYMBOL:
            case JavaLangCharacter_CURRENCY_SYMBOL:
            case JavaLangCharacter_MODIFIER_SYMBOL:
            case JavaLangCharacter_OTHER_SYMBOL:
            break;
            default:
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_LOWER:
          if (JavaLangCharacter_getTypeWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx]) != JavaLangCharacter_LOWERCASE_LETTER) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_UPPER:
          if (JavaLangCharacter_getTypeWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx]) != JavaLangCharacter_UPPERCASE_LETTER) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_PRINT:
          if (JavaLangCharacter_getTypeWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx]) == JavaLangCharacter_CONTROL) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_PUNCT:
          {
            jint type = JavaLangCharacter_getTypeWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx]);
            switch (type) {
              case JavaLangCharacter_DASH_PUNCTUATION:
              case JavaLangCharacter_START_PUNCTUATION:
              case JavaLangCharacter_END_PUNCTUATION:
              case JavaLangCharacter_CONNECTOR_PUNCTUATION:
              case JavaLangCharacter_OTHER_PUNCTUATION:
              break;
              default:
              return -1;
            }
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_XDIGIT:
          {
            jboolean isXDigit = (([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx] >= '0' && [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx] <= '9') || ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx] >= 'a' && [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx] <= 'f') || ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx] >= 'A' && [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx] <= 'F'));
            if (!isXDigit) {
              return -1;
            }
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_JSTART:
          if (!JavaLangCharacter_isJavaIdentifierStartWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            return -1;
          }
          break;
          case OrgApacheRegexpRE_POSIX_CLASS_JPART:
          if (!JavaLangCharacter_isJavaIdentifierPartWithChar_([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx])) {
            return -1;
          }
          break;
          default:
          [self internalErrorWithNSString:@"Bad posix class"];
          break;
        }
        idx++;
      }
      break;
      case OrgApacheRegexpRE_OP_ANYOF:
      {
        if ([((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) isEndWithInt:idx]) {
          return -1;
        }
        jchar c = [((id<OrgApacheRegexpCharacterIterator>) nil_chk(search_)) charAtWithInt:idx];
        jboolean caseFold = (matchFlags_ & OrgApacheRegexpRE_MATCH_CASEINDEPENDENT) != 0;
        jint idxRange = node + OrgApacheRegexpRE_nodeSize;
        jint idxEnd = idxRange + (opdata * 2);
        jboolean match = false;
        for (jint i = idxRange; !match && i < idxEnd; ) {
          jchar s = IOSCharArray_Get(instruction, i++);
          jchar e = IOSCharArray_Get(instruction, i++);
          match = ((OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(self, c, s, caseFold) >= 0) && (OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(self, c, e, caseFold) <= 0));
        }
        if (!match) {
          return -1;
        }
        idx++;
      }
      break;
      case OrgApacheRegexpRE_OP_BRANCH:
      {
        if (IOSCharArray_Get(instruction, next + OrgApacheRegexpRE_offsetOpcode) != OrgApacheRegexpRE_OP_BRANCH) {
          node += OrgApacheRegexpRE_nodeSize;
          continue;
        }
        jshort nextBranch;
        do {
          if ((idxNew = [self matchNodesWithInt:node + OrgApacheRegexpRE_nodeSize withInt:OrgApacheRegexpRE_maxNode withInt:idx]) != -1) {
            return idxNew;
          }
          nextBranch = (jshort) IOSCharArray_Get(instruction, node + OrgApacheRegexpRE_offsetNext);
          node += nextBranch;
        }
        while (nextBranch != 0 && (IOSCharArray_Get(instruction, node + OrgApacheRegexpRE_offsetOpcode) == OrgApacheRegexpRE_OP_BRANCH));
        return -1;
      }
      case OrgApacheRegexpRE_OP_NOTHING:
      case OrgApacheRegexpRE_OP_GOTO:
      break;
      case OrgApacheRegexpRE_OP_END:
      OrgApacheRegexpRE_setParenEndWithInt_withInt_(self, 0, idx);
      return idx;
      default:
      [self internalErrorWithNSString:JreStrcat("$IC", @"Invalid opcode '", opcode, '\'')];
    }
    node = next;
  }
  [self internalErrorWithNSString:@"Corrupt program"];
  return -1;
}

- (jboolean)matchAtWithInt:(jint)i {
  start0_ = -1;
  end0_ = -1;
  start1_ = -1;
  end1_ = -1;
  start2_ = -1;
  end2_ = -1;
  startn_ = nil;
  endn_ = nil;
  parenCount_ = 1;
  OrgApacheRegexpRE_setParenStartWithInt_withInt_(self, 0, i);
  if ((((OrgApacheRegexpREProgram *) nil_chk(program_))->flags_ & OrgApacheRegexpREProgram_OPT_HASBACKREFS) != 0) {
    startBackref_ = [IOSIntArray newArrayWithLength:maxParen_];
    endBackref_ = [IOSIntArray newArrayWithLength:maxParen_];
  }
  jint idx;
  if ((idx = [self matchNodesWithInt:0 withInt:OrgApacheRegexpRE_maxNode withInt:i]) != -1) {
    OrgApacheRegexpRE_setParenEndWithInt_withInt_(self, 0, idx);
    return true;
  }
  parenCount_ = 0;
  return false;
}

- (jboolean)matchWithNSString:(NSString *)search
                      withInt:(jint)i {
  return [self matchWithOrgApacheRegexpCharacterIterator:new_OrgApacheRegexpStringCharacterIterator_initWithNSString_(search) withInt:i];
}

- (jboolean)matchWithOrgApacheRegexpCharacterIterator:(id<OrgApacheRegexpCharacterIterator>)search
                                              withInt:(jint)i {
  if (program_ == nil) {
    [self internalErrorWithNSString:@"No RE program to run!"];
  }
  self->search_ = search;
  if ((((OrgApacheRegexpREProgram *) nil_chk(program_))->flags_ & OrgApacheRegexpREProgram_OPT_HASBOL) == OrgApacheRegexpREProgram_OPT_HASBOL) {
    if ((matchFlags_ & OrgApacheRegexpRE_MATCH_MULTILINE) == 0) {
      return i == 0 && [self matchAtWithInt:i];
    }
    for (; ![((id<OrgApacheRegexpCharacterIterator>) nil_chk(search)) isEndWithInt:i]; i++) {
      if (OrgApacheRegexpRE_isNewlineWithInt_(self, i)) {
        continue;
      }
      if ([self matchAtWithInt:i]) {
        return true;
      }
      for (; ![search isEndWithInt:i]; i++) {
        if (OrgApacheRegexpRE_isNewlineWithInt_(self, i)) {
          break;
        }
      }
    }
    return false;
  }
  if (program_->prefix_ == nil) {
    for (; ![((id<OrgApacheRegexpCharacterIterator>) nil_chk(search)) isEndWithInt:i - 1]; i++) {
      if ([self matchAtWithInt:i]) {
        return true;
      }
    }
    return false;
  }
  else {
    jboolean caseIndependent = (matchFlags_ & OrgApacheRegexpRE_MATCH_CASEINDEPENDENT) != 0;
    IOSCharArray *prefix = program_->prefix_;
    for (; ![((id<OrgApacheRegexpCharacterIterator>) nil_chk(search)) isEndWithInt:i + prefix->size_ - 1]; i++) {
      jint j = i;
      jint k = 0;
      jboolean match;
      do {
        match = (OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(self, [search charAtWithInt:j++], IOSCharArray_Get(prefix, k++), caseIndependent) == 0);
      }
      while (match && k < prefix->size_);
      if (k == prefix->size_) {
        if ([self matchAtWithInt:i]) {
          return true;
        }
      }
    }
    return false;
  }
}

- (jboolean)matchWithNSString:(NSString *)search {
  return [self matchWithNSString:search withInt:0];
}

- (IOSObjectArray *)splitWithNSString:(NSString *)s {
  JavaUtilVector *v = new_JavaUtilVector_init();
  jint pos = 0;
  jint len = [((NSString *) nil_chk(s)) java_length];
  while (pos < len && [self matchWithNSString:s withInt:pos]) {
    jint start = OrgApacheRegexpRE_getParenStartWithInt_(self, 0);
    jint newpos = OrgApacheRegexpRE_getParenEndWithInt_(self, 0);
    if (newpos == pos) {
      [v addElementWithId:[s java_substring:pos endIndex:start + 1]];
      newpos++;
    }
    else {
      [v addElementWithId:[s java_substring:pos endIndex:start]];
    }
    pos = newpos;
  }
  NSString *remainder = [s java_substring:pos];
  if ([((NSString *) nil_chk(remainder)) java_length] != 0) {
    [v addElementWithId:remainder];
  }
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[v size] type:NSString_class_()];
  [v copyIntoWithNSObjectArray:ret];
  return ret;
}

- (NSString *)substWithNSString:(NSString *)substituteIn
                   withNSString:(NSString *)substitution {
  return [self substWithNSString:substituteIn withNSString:substitution withInt:OrgApacheRegexpRE_REPLACE_ALL];
}

- (NSString *)substWithNSString:(NSString *)substituteIn
                   withNSString:(NSString *)substitution
                        withInt:(jint)flags {
  JavaLangStringBuffer *ret = new_JavaLangStringBuffer_init();
  jint pos = 0;
  jint len = [((NSString *) nil_chk(substituteIn)) java_length];
  while (pos < len && [self matchWithNSString:substituteIn withInt:pos]) {
    (void) [ret appendWithNSString:[substituteIn java_substring:pos endIndex:OrgApacheRegexpRE_getParenStartWithInt_(self, 0)]];
    if ((flags & OrgApacheRegexpRE_REPLACE_BACKREFERENCES) != 0) {
      jint lCurrentPosition = 0;
      jint lLastPosition = -2;
      jint lLength = [((NSString *) nil_chk(substitution)) java_length];
      jboolean bAddedPrefix = false;
      while ((lCurrentPosition = [substitution java_indexOfString:@"$" fromIndex:lCurrentPosition]) >= 0) {
        if ((lCurrentPosition == 0 || [substitution charAtWithInt:lCurrentPosition - 1] != '\\') && lCurrentPosition + 1 < lLength) {
          jchar c = [substitution charAtWithInt:lCurrentPosition + 1];
          if (c >= '0' && c <= '9') {
            if (bAddedPrefix == false) {
              (void) [ret appendWithNSString:[substitution java_substring:0 endIndex:lCurrentPosition]];
              bAddedPrefix = true;
            }
            else {
              (void) [ret appendWithNSString:[substitution java_substring:lLastPosition + 2 endIndex:lCurrentPosition]];
            }
            (void) [ret appendWithNSString:[self getParenWithInt:c - '0']];
            lLastPosition = lCurrentPosition;
          }
        }
        lCurrentPosition++;
      }
      (void) [ret appendWithNSString:[substitution java_substring:lLastPosition + 2 endIndex:lLength]];
    }
    else {
      (void) [ret appendWithNSString:substitution];
    }
    jint newpos = OrgApacheRegexpRE_getParenEndWithInt_(self, 0);
    if (newpos == pos) {
      newpos++;
    }
    pos = newpos;
    if ((flags & OrgApacheRegexpRE_REPLACE_FIRSTONLY) != 0) {
      break;
    }
  }
  if (pos < len) {
    (void) [ret appendWithNSString:[substituteIn java_substring:pos]];
  }
  return [ret description];
}

- (IOSObjectArray *)grepWithNSObjectArray:(IOSObjectArray *)search {
  JavaUtilVector *v = new_JavaUtilVector_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(search))->size_; i++) {
    NSString *s = [nil_chk(IOSObjectArray_Get(search, i)) description];
    if ([self matchWithNSString:s]) {
      [v addElementWithId:s];
    }
  }
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[v size] type:NSString_class_()];
  [v copyIntoWithNSObjectArray:ret];
  return ret;
}

- (jboolean)isNewlineWithInt:(jint)i {
  return OrgApacheRegexpRE_isNewlineWithInt_(self, i);
}

- (jint)compareCharsWithChar:(jchar)c1
                    withChar:(jchar)c2
                 withBoolean:(jboolean)caseIndependent {
  return OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(self, c1, c2, caseIndependent);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheRegexpREProgram;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 10, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 11, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 12, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 0, 17, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 20, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 0, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 23, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 26, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 29, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 30, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(initWithOrgApacheRegexpREProgram:withInt:);
  methods[3].selector = @selector(initWithOrgApacheRegexpREProgram:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(simplePatternToFullRegularExpressionWithNSString:);
  methods[6].selector = @selector(setMatchFlagsWithInt:);
  methods[7].selector = @selector(getMatchFlags);
  methods[8].selector = @selector(setProgramWithOrgApacheRegexpREProgram:);
  methods[9].selector = @selector(getProgram);
  methods[10].selector = @selector(getParenCount);
  methods[11].selector = @selector(getParenWithInt:);
  methods[12].selector = @selector(getParenStartWithInt:);
  methods[13].selector = @selector(getParenEndWithInt:);
  methods[14].selector = @selector(getParenLengthWithInt:);
  methods[15].selector = @selector(setParenStartWithInt:withInt:);
  methods[16].selector = @selector(setParenEndWithInt:withInt:);
  methods[17].selector = @selector(internalErrorWithNSString:);
  methods[18].selector = @selector(allocParens);
  methods[19].selector = @selector(matchNodesWithInt:withInt:withInt:);
  methods[20].selector = @selector(matchAtWithInt:);
  methods[21].selector = @selector(matchWithNSString:withInt:);
  methods[22].selector = @selector(matchWithOrgApacheRegexpCharacterIterator:withInt:);
  methods[23].selector = @selector(matchWithNSString:);
  methods[24].selector = @selector(splitWithNSString:);
  methods[25].selector = @selector(substWithNSString:withNSString:);
  methods[26].selector = @selector(substWithNSString:withNSString:withInt:);
  methods[27].selector = @selector(grepWithNSObjectArray:);
  methods[28].selector = @selector(isNewlineWithInt:);
  methods[29].selector = @selector(compareCharsWithChar:withChar:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MATCH_NORMAL", "I", .constantValue.asInt = OrgApacheRegexpRE_MATCH_NORMAL, 0x19, -1, -1, -1, -1 },
    { "MATCH_CASEINDEPENDENT", "I", .constantValue.asInt = OrgApacheRegexpRE_MATCH_CASEINDEPENDENT, 0x19, -1, -1, -1, -1 },
    { "MATCH_MULTILINE", "I", .constantValue.asInt = OrgApacheRegexpRE_MATCH_MULTILINE, 0x19, -1, -1, -1, -1 },
    { "MATCH_SINGLELINE", "I", .constantValue.asInt = OrgApacheRegexpRE_MATCH_SINGLELINE, 0x19, -1, -1, -1, -1 },
    { "OP_END", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_END, 0x18, -1, -1, -1, -1 },
    { "OP_BOL", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_BOL, 0x18, -1, -1, -1, -1 },
    { "OP_EOL", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_EOL, 0x18, -1, -1, -1, -1 },
    { "OP_ANY", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_ANY, 0x18, -1, -1, -1, -1 },
    { "OP_ANYOF", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_ANYOF, 0x18, -1, -1, -1, -1 },
    { "OP_BRANCH", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_BRANCH, 0x18, -1, -1, -1, -1 },
    { "OP_ATOM", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_ATOM, 0x18, -1, -1, -1, -1 },
    { "OP_STAR", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_STAR, 0x18, -1, -1, -1, -1 },
    { "OP_PLUS", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_PLUS, 0x18, -1, -1, -1, -1 },
    { "OP_MAYBE", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_MAYBE, 0x18, -1, -1, -1, -1 },
    { "OP_ESCAPE", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_ESCAPE, 0x18, -1, -1, -1, -1 },
    { "OP_OPEN", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_OPEN, 0x18, -1, -1, -1, -1 },
    { "OP_OPEN_CLUSTER", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_OPEN_CLUSTER, 0x18, -1, -1, -1, -1 },
    { "OP_CLOSE", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_CLOSE, 0x18, -1, -1, -1, -1 },
    { "OP_CLOSE_CLUSTER", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_CLOSE_CLUSTER, 0x18, -1, -1, -1, -1 },
    { "OP_BACKREF", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_BACKREF, 0x18, -1, -1, -1, -1 },
    { "OP_GOTO", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_GOTO, 0x18, -1, -1, -1, -1 },
    { "OP_NOTHING", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_NOTHING, 0x18, -1, -1, -1, -1 },
    { "OP_RELUCTANTSTAR", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_RELUCTANTSTAR, 0x18, -1, -1, -1, -1 },
    { "OP_RELUCTANTPLUS", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_RELUCTANTPLUS, 0x18, -1, -1, -1, -1 },
    { "OP_RELUCTANTMAYBE", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_RELUCTANTMAYBE, 0x18, -1, -1, -1, -1 },
    { "OP_POSIXCLASS", "C", .constantValue.asUnichar = OrgApacheRegexpRE_OP_POSIXCLASS, 0x18, -1, -1, -1, -1 },
    { "E_ALNUM", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_ALNUM, 0x18, -1, -1, -1, -1 },
    { "E_NALNUM", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_NALNUM, 0x18, -1, -1, -1, -1 },
    { "E_BOUND", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_BOUND, 0x18, -1, -1, -1, -1 },
    { "E_NBOUND", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_NBOUND, 0x18, -1, -1, -1, -1 },
    { "E_SPACE", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_SPACE, 0x18, -1, -1, -1, -1 },
    { "E_NSPACE", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_NSPACE, 0x18, -1, -1, -1, -1 },
    { "E_DIGIT", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_DIGIT, 0x18, -1, -1, -1, -1 },
    { "E_NDIGIT", "C", .constantValue.asUnichar = OrgApacheRegexpRE_E_NDIGIT, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_ALNUM", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_ALNUM, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_ALPHA", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_ALPHA, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_BLANK", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_BLANK, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_CNTRL", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_CNTRL, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_DIGIT", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_DIGIT, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_GRAPH", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_GRAPH, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_LOWER", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_LOWER, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_PRINT", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_PRINT, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_PUNCT", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_PUNCT, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_SPACE", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_SPACE, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_UPPER", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_UPPER, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_XDIGIT", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_XDIGIT, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_JSTART", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_JSTART, 0x18, -1, -1, -1, -1 },
    { "POSIX_CLASS_JPART", "C", .constantValue.asUnichar = OrgApacheRegexpRE_POSIX_CLASS_JPART, 0x18, -1, -1, -1, -1 },
    { "maxNode", "I", .constantValue.asInt = OrgApacheRegexpRE_maxNode, 0x18, -1, -1, -1, -1 },
    { "MAX_PAREN", "I", .constantValue.asInt = OrgApacheRegexpRE_MAX_PAREN, 0x18, -1, -1, -1, -1 },
    { "offsetOpcode", "I", .constantValue.asInt = OrgApacheRegexpRE_offsetOpcode, 0x18, -1, -1, -1, -1 },
    { "offsetOpdata", "I", .constantValue.asInt = OrgApacheRegexpRE_offsetOpdata, 0x18, -1, -1, -1, -1 },
    { "offsetNext", "I", .constantValue.asInt = OrgApacheRegexpRE_offsetNext, 0x18, -1, -1, -1, -1 },
    { "nodeSize", "I", .constantValue.asInt = OrgApacheRegexpRE_nodeSize, 0x18, -1, -1, -1, -1 },
    { "program_", "LOrgApacheRegexpREProgram;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "search_", "LOrgApacheRegexpCharacterIterator;", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "matchFlags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxParen_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "parenCount_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "start0_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "end0_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "start1_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "end1_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "start2_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "end2_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "startn_", "[I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "endn_", "[I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "startBackref_", "[I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "endBackref_", "[I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "REPLACE_ALL", "I", .constantValue.asInt = OrgApacheRegexpRE_REPLACE_ALL, 0x19, -1, -1, -1, -1 },
    { "REPLACE_FIRSTONLY", "I", .constantValue.asInt = OrgApacheRegexpRE_REPLACE_FIRSTONLY, 0x19, -1, -1, -1, -1 },
    { "REPLACE_BACKREFERENCES", "I", .constantValue.asInt = OrgApacheRegexpRE_REPLACE_BACKREFERENCES, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgApacheRegexpRESyntaxException;", "LNSString;I", "LOrgApacheRegexpREProgram;I", "LOrgApacheRegexpREProgram;", "simplePatternToFullRegularExpression", "setMatchFlags", "I", "setProgram", "getParen", "getParenStart", "getParenEnd", "getParenLength", "setParenStart", "II", "setParenEnd", "internalError", "LJavaLangError;", "matchNodes", "III", "matchAt", "match", "LOrgApacheRegexpCharacterIterator;I", "split", "subst", "LNSString;LNSString;", "LNSString;LNSString;I", "grep", "[LNSObject;", "isNewline", "compareChars", "CCZ" };
  static const J2ObjcClassInfo _OrgApacheRegexpRE = { "RE", "org.apache.regexp", ptrTable, methods, fields, 7, 0x1, 30, 72, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpRE;
}

@end

void OrgApacheRegexpRE_initWithNSString_(OrgApacheRegexpRE *self, NSString *pattern) {
  OrgApacheRegexpRE_initWithNSString_withInt_(self, pattern, OrgApacheRegexpRE_MATCH_NORMAL);
}

OrgApacheRegexpRE *new_OrgApacheRegexpRE_initWithNSString_(NSString *pattern) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpRE, initWithNSString_, pattern)
}

OrgApacheRegexpRE *create_OrgApacheRegexpRE_initWithNSString_(NSString *pattern) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpRE, initWithNSString_, pattern)
}

void OrgApacheRegexpRE_initWithNSString_withInt_(OrgApacheRegexpRE *self, NSString *pattern, jint matchFlags) {
  OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_(self, [new_OrgApacheRegexpRECompiler_init() compileWithNSString:pattern]);
  [self setMatchFlagsWithInt:matchFlags];
}

OrgApacheRegexpRE *new_OrgApacheRegexpRE_initWithNSString_withInt_(NSString *pattern, jint matchFlags) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpRE, initWithNSString_withInt_, pattern, matchFlags)
}

OrgApacheRegexpRE *create_OrgApacheRegexpRE_initWithNSString_withInt_(NSString *pattern, jint matchFlags) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpRE, initWithNSString_withInt_, pattern, matchFlags)
}

void OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_withInt_(OrgApacheRegexpRE *self, OrgApacheRegexpREProgram *program, jint matchFlags) {
  NSObject_init(self);
  self->maxParen_ = OrgApacheRegexpRE_MAX_PAREN;
  [self setProgramWithOrgApacheRegexpREProgram:program];
  [self setMatchFlagsWithInt:matchFlags];
}

OrgApacheRegexpRE *new_OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_withInt_(OrgApacheRegexpREProgram *program, jint matchFlags) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpRE, initWithOrgApacheRegexpREProgram_withInt_, program, matchFlags)
}

OrgApacheRegexpRE *create_OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_withInt_(OrgApacheRegexpREProgram *program, jint matchFlags) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpRE, initWithOrgApacheRegexpREProgram_withInt_, program, matchFlags)
}

void OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_(OrgApacheRegexpRE *self, OrgApacheRegexpREProgram *program) {
  OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_withInt_(self, program, OrgApacheRegexpRE_MATCH_NORMAL);
}

OrgApacheRegexpRE *new_OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_(OrgApacheRegexpREProgram *program) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpRE, initWithOrgApacheRegexpREProgram_, program)
}

OrgApacheRegexpRE *create_OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_(OrgApacheRegexpREProgram *program) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpRE, initWithOrgApacheRegexpREProgram_, program)
}

void OrgApacheRegexpRE_init(OrgApacheRegexpRE *self) {
  OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_withInt_(self, nil, OrgApacheRegexpRE_MATCH_NORMAL);
}

OrgApacheRegexpRE *new_OrgApacheRegexpRE_init() {
  J2OBJC_NEW_IMPL(OrgApacheRegexpRE, init)
}

OrgApacheRegexpRE *create_OrgApacheRegexpRE_init() {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpRE, init)
}

NSString *OrgApacheRegexpRE_simplePatternToFullRegularExpressionWithNSString_(NSString *pattern) {
  OrgApacheRegexpRE_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < [((NSString *) nil_chk(pattern)) java_length]; i++) {
    jchar c = [pattern charAtWithInt:i];
    switch (c) {
      case '*':
      (void) [buf appendWithNSString:@".*"];
      break;
      case '.':
      case '[':
      case ']':
      case '\\':
      case '+':
      case '?':
      case '{':
      case '}':
      case '$':
      case '^':
      case '|':
      case '(':
      case ')':
      (void) [buf appendWithChar:'\\'];
      default:
      (void) [buf appendWithChar:c];
      break;
    }
  }
  return [buf description];
}

jint OrgApacheRegexpRE_getParenStartWithInt_(OrgApacheRegexpRE *self, jint which) {
  if (which < self->parenCount_) {
    switch (which) {
      case 0:
      return self->start0_;
      case 1:
      return self->start1_;
      case 2:
      return self->start2_;
      default:
      if (self->startn_ == nil) {
        OrgApacheRegexpRE_allocParens(self);
      }
      return IOSIntArray_Get(nil_chk(self->startn_), which);
    }
  }
  return -1;
}

jint OrgApacheRegexpRE_getParenEndWithInt_(OrgApacheRegexpRE *self, jint which) {
  if (which < self->parenCount_) {
    switch (which) {
      case 0:
      return self->end0_;
      case 1:
      return self->end1_;
      case 2:
      return self->end2_;
      default:
      if (self->endn_ == nil) {
        OrgApacheRegexpRE_allocParens(self);
      }
      return IOSIntArray_Get(nil_chk(self->endn_), which);
    }
  }
  return -1;
}

void OrgApacheRegexpRE_setParenStartWithInt_withInt_(OrgApacheRegexpRE *self, jint which, jint i) {
  if (which < self->parenCount_) {
    switch (which) {
      case 0:
      self->start0_ = i;
      break;
      case 1:
      self->start1_ = i;
      break;
      case 2:
      self->start2_ = i;
      break;
      default:
      if (self->startn_ == nil) {
        OrgApacheRegexpRE_allocParens(self);
      }
      *IOSIntArray_GetRef(nil_chk(self->startn_), which) = i;
      break;
    }
  }
}

void OrgApacheRegexpRE_setParenEndWithInt_withInt_(OrgApacheRegexpRE *self, jint which, jint i) {
  if (which < self->parenCount_) {
    switch (which) {
      case 0:
      self->end0_ = i;
      break;
      case 1:
      self->end1_ = i;
      break;
      case 2:
      self->end2_ = i;
      break;
      default:
      if (self->endn_ == nil) {
        OrgApacheRegexpRE_allocParens(self);
      }
      *IOSIntArray_GetRef(nil_chk(self->endn_), which) = i;
      break;
    }
  }
}

void OrgApacheRegexpRE_allocParens(OrgApacheRegexpRE *self) {
  self->startn_ = [IOSIntArray newArrayWithLength:self->maxParen_];
  self->endn_ = [IOSIntArray newArrayWithLength:self->maxParen_];
  for (jint i = 0; i < self->maxParen_; i++) {
    *IOSIntArray_GetRef(self->startn_, i) = -1;
    *IOSIntArray_GetRef(self->endn_, i) = -1;
  }
}

jboolean OrgApacheRegexpRE_isNewlineWithInt_(OrgApacheRegexpRE *self, jint i) {
  jchar nextChar = [((id<OrgApacheRegexpCharacterIterator>) nil_chk(self->search_)) charAtWithInt:i];
  if (nextChar == 0x000a || nextChar == 0x000d || nextChar == 0x0085 || nextChar == 0x2028 || nextChar == 0x2029) {
    return true;
  }
  return false;
}

jint OrgApacheRegexpRE_compareCharsWithChar_withChar_withBoolean_(OrgApacheRegexpRE *self, jchar c1, jchar c2, jboolean caseIndependent) {
  if (caseIndependent) {
    c1 = JavaLangCharacter_toLowerCaseWithChar_(c1);
    c2 = JavaLangCharacter_toLowerCaseWithChar_(c2);
  }
  return ((jint) c1 - (jint) c2);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpRE)
