//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/RETest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringBufferInputStream.h"
#include "java/io/StringReader.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "org/apache/regexp/CharacterArrayCharacterIterator.h"
#include "org/apache/regexp/CharacterIterator.h"
#include "org/apache/regexp/RE.h"
#include "org/apache/regexp/REDebugCompiler.h"
#include "org/apache/regexp/REProgram.h"
#include "org/apache/regexp/RETest.h"
#include "org/apache/regexp/ReaderCharacterIterator.h"
#include "org/apache/regexp/StreamCharacterIterator.h"
#include "org/apache/regexp/StringCharacterIterator.h"

@interface OrgApacheRegexpRETest ()

- (void)testPrecompiledRE;

- (void)testSplitAndGrep;

- (void)testSubst;

- (jboolean)getExpectedResultWithNSString:(NSString *)yesno;

- (NSString *)findNextTestWithJavaIoBufferedReader:(JavaIoBufferedReader *)br;

- (OrgApacheRegexpRETestCase *)getNextTestCaseWithJavaIoBufferedReader:(JavaIoBufferedReader *)br;

@end

__attribute__((unused)) static void OrgApacheRegexpRETest_testPrecompiledRE(OrgApacheRegexpRETest *self);

__attribute__((unused)) static void OrgApacheRegexpRETest_testSplitAndGrep(OrgApacheRegexpRETest *self);

__attribute__((unused)) static void OrgApacheRegexpRETest_testSubst(OrgApacheRegexpRETest *self);

__attribute__((unused)) static jboolean OrgApacheRegexpRETest_getExpectedResultWithNSString_(OrgApacheRegexpRETest *self, NSString *yesno);

__attribute__((unused)) static NSString *OrgApacheRegexpRETest_findNextTestWithJavaIoBufferedReader_(OrgApacheRegexpRETest *self, JavaIoBufferedReader *br);

__attribute__((unused)) static OrgApacheRegexpRETestCase *OrgApacheRegexpRETest_getNextTestCaseWithJavaIoBufferedReader_(OrgApacheRegexpRETest *self, JavaIoBufferedReader *br);

@interface OrgApacheRegexpRETestCase () {
 @public
  JavaLangStringBuffer *log_;
  jint number_;
  NSString *tag_;
  NSString *pattern_;
  NSString *toMatch_;
  jboolean badPattern_;
  jboolean shouldMatch_;
  IOSObjectArray *parens_;
  OrgApacheRegexpRETest *test_;
  OrgApacheRegexpRE *regexp_;
}

- (void)testMatch;

- (jboolean)checkResultWithBoolean:(jboolean)result;

- (jboolean)checkParens;

@end

J2OBJC_FIELD_SETTER(OrgApacheRegexpRETestCase, log_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRETestCase, tag_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRETestCase, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRETestCase, toMatch_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRETestCase, parens_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRETestCase, test_, OrgApacheRegexpRETest *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpRETestCase, regexp_, OrgApacheRegexpRE *)

__attribute__((unused)) static void OrgApacheRegexpRETestCase_testMatch(OrgApacheRegexpRETestCase *self);

__attribute__((unused)) static jboolean OrgApacheRegexpRETestCase_checkResultWithBoolean_(OrgApacheRegexpRETestCase *self, jboolean result);

__attribute__((unused)) static jboolean OrgApacheRegexpRETestCase_checkParens(OrgApacheRegexpRETestCase *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheRegexpRETest)

NSString *OrgApacheRegexpRETest_NEW_LINE;

@implementation OrgApacheRegexpRETest

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheRegexpRETest_mainWithNSStringArray_(args);
}

+ (jboolean)testWithNSStringArray:(IOSObjectArray *)args {
  return OrgApacheRegexpRETest_testWithNSStringArray_(args);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheRegexpRETest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)runInteractiveTestsWithNSString:(NSString *)expr {
  OrgApacheRegexpRE *r = new_OrgApacheRegexpRE_init();
  @try {
    [r setProgramWithOrgApacheRegexpREProgram:[((OrgApacheRegexpREDebugCompiler *) nil_chk(compiler_)) compileWithNSString:expr]];
    [self sayWithNSString:JreStrcat("$$$", OrgApacheRegexpRETest_NEW_LINE, expr, OrgApacheRegexpRETest_NEW_LINE)];
    JavaIoPrintWriter *writer = new_JavaIoPrintWriter_initWithJavaIoOutputStream_(JreLoadStatic(JavaLangSystem, out));
    [((OrgApacheRegexpREDebugCompiler *) nil_chk(compiler_)) dumpProgramWithJavaIoPrintWriter:writer];
    [writer flush];
    jboolean running = true;
    while (running) {
      JavaIoBufferedReader *br = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"> "];
      [JreLoadStatic(JavaLangSystem, out) flush];
      NSString *match = [br readLine];
      if (match != nil) {
        if ([r matchWithNSString:match]) {
          [self sayWithNSString:@"Match successful."];
        }
        else {
          [self sayWithNSString:@"Match failed."];
        }
        [self showParensWithOrgApacheRegexpRE:r];
      }
      else {
        running = false;
        [JreLoadStatic(JavaLangSystem, out) println];
      }
    }
  }
  @catch (JavaLangException *e) {
    [self sayWithNSString:JreStrcat("$$", @"Error: ", [e description])];
    [e printStackTrace];
  }
}

- (void)dieWithNSString:(NSString *)s {
  [self sayWithNSString:JreStrcat("$$", @"FATAL ERROR: ", s)];
  JavaLangSystem_exitWithInt_(-1);
}

- (void)failWithJavaLangStringBuffer:(JavaLangStringBuffer *)log
                        withNSString:(NSString *)s {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:[((JavaLangStringBuffer *) nil_chk(log)) description]];
  [self failWithNSString:s];
}

- (void)failWithNSString:(NSString *)s {
  failures_++;
  [self sayWithNSString:OrgApacheRegexpRETest_NEW_LINE];
  [self sayWithNSString:@"*******************************************************"];
  [self sayWithNSString:@"*********************  FAILURE!  **********************"];
  [self sayWithNSString:@"*******************************************************"];
  [self sayWithNSString:OrgApacheRegexpRETest_NEW_LINE];
  [self sayWithNSString:s];
  [self sayWithNSString:@""];
  if (compiler_ != nil) {
    JavaIoPrintWriter *writer = new_JavaIoPrintWriter_initWithJavaIoOutputStream_(JreLoadStatic(JavaLangSystem, out));
    [((OrgApacheRegexpREDebugCompiler *) nil_chk(compiler_)) dumpProgramWithJavaIoPrintWriter:writer];
    [writer flush];
    [self sayWithNSString:OrgApacheRegexpRETest_NEW_LINE];
  }
}

- (void)sayWithNSString:(NSString *)s {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
}

- (void)showParensWithOrgApacheRegexpRE:(OrgApacheRegexpRE *)r {
  for (jint i = 0; i < [((OrgApacheRegexpRE *) nil_chk(r)) getParenCount]; i++) {
    [self sayWithNSString:JreStrcat("CI$$", '$', i, @" = ", [r getParenWithInt:i])];
  }
}

- (void)runAutomatedTestsWithNSString:(NSString *)testDocument {
  jlong ms = JavaLangSystem_currentTimeMillis();
  OrgApacheRegexpRETest_testPrecompiledRE(self);
  OrgApacheRegexpRETest_testSplitAndGrep(self);
  OrgApacheRegexpRETest_testSubst(self);
  [self testOther];
  JavaIoFile *testInput = new_JavaIoFile_initWithNSString_(testDocument);
  if (![testInput exists]) {
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$", @"Could not find: ", testDocument));
  }
  JavaIoBufferedReader *br = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoFileReader_initWithJavaIoFile_(testInput));
  @try {
    while ([br ready]) {
      OrgApacheRegexpRETestCase *testcase = OrgApacheRegexpRETest_getNextTestCaseWithJavaIoBufferedReader_(self, br);
      if (testcase != nil) {
        [testcase runTest];
      }
    }
  }
  @finally {
    [br close];
  }
  [self sayWithNSString:JreStrcat("$$$J$", OrgApacheRegexpRETest_NEW_LINE, OrgApacheRegexpRETest_NEW_LINE, @"Match time = ", (JavaLangSystem_currentTimeMillis() - ms), @" ms.")];
  if (failures_ > 0) {
    [self sayWithNSString:@"*************** THERE ARE FAILURES! *******************"];
  }
  [self sayWithNSString:JreStrcat("$I$I$", @"Tests complete.  ", testCount_, @" tests, ", failures_, @" failure(s).")];
}

- (void)testOther {
  OrgApacheRegexpRE *r = new_OrgApacheRegexpRE_initWithNSString_(@"(a*)b");
  [self sayWithNSString:@"Serialized/deserialized (a*)b"];
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_initWithInt_(128);
  [new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(out) writeObjectWithId:r];
  JavaIoByteArrayInputStream *in = new_JavaIoByteArrayInputStream_initWithByteArray_([out toByteArray]);
  r = (OrgApacheRegexpRE *) cast_chk([new_JavaIoObjectInputStream_initWithJavaIoInputStream_(in) readObject], [OrgApacheRegexpRE class]);
  if (![((OrgApacheRegexpRE *) nil_chk(r)) matchWithNSString:@"aaab"]) {
    [self failWithNSString:@"Did not match 'aaab' with deserialized RE."];
  }
  else {
    [self sayWithNSString:@"aaaab = true"];
    [self showParensWithOrgApacheRegexpRE:r];
  }
  [out reset];
  [self sayWithNSString:@"Deserialized (a*)b"];
  [new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(out) writeObjectWithId:r];
  in = new_JavaIoByteArrayInputStream_initWithByteArray_([out toByteArray]);
  r = (OrgApacheRegexpRE *) cast_chk([new_JavaIoObjectInputStream_initWithJavaIoInputStream_(in) readObject], [OrgApacheRegexpRE class]);
  if ([((OrgApacheRegexpRE *) nil_chk(r)) getParenCount] != 0) {
    [self failWithNSString:@"Has parens after deserialization."];
  }
  if (![r matchWithNSString:@"aaab"]) {
    [self failWithNSString:@"Did not match 'aaab' with deserialized RE."];
  }
  else {
    [self sayWithNSString:@"aaaab = true"];
    [self showParensWithOrgApacheRegexpRE:r];
  }
  r = new_OrgApacheRegexpRE_initWithNSString_(@"abc(\\w*)");
  [self sayWithNSString:@"MATCH_CASEINDEPENDENT abc(\\w*)"];
  [r setMatchFlagsWithInt:OrgApacheRegexpRE_MATCH_CASEINDEPENDENT];
  [self sayWithNSString:@"abc(d*)"];
  if (![r matchWithNSString:@"abcddd"]) {
    [self failWithNSString:@"Did not match 'abcddd'."];
  }
  else {
    [self sayWithNSString:@"abcddd = true"];
    [self showParensWithOrgApacheRegexpRE:r];
  }
  if (![r matchWithNSString:@"aBcDDdd"]) {
    [self failWithNSString:@"Did not match 'aBcDDdd'."];
  }
  else {
    [self sayWithNSString:@"aBcDDdd = true"];
    [self showParensWithOrgApacheRegexpRE:r];
  }
  if (![r matchWithNSString:@"ABCDDDDD"]) {
    [self failWithNSString:@"Did not match 'ABCDDDDD'."];
  }
  else {
    [self sayWithNSString:@"ABCDDDDD = true"];
    [self showParensWithOrgApacheRegexpRE:r];
  }
  r = new_OrgApacheRegexpRE_initWithNSString_(@"(A*)b\\1");
  [r setMatchFlagsWithInt:OrgApacheRegexpRE_MATCH_CASEINDEPENDENT];
  if (![r matchWithNSString:@"AaAaaaBAAAAAA"]) {
    [self failWithNSString:@"Did not match 'AaAaaaBAAAAAA'."];
  }
  else {
    [self sayWithNSString:@"AaAaaaBAAAAAA = true"];
    [self showParensWithOrgApacheRegexpRE:r];
  }
  r = new_OrgApacheRegexpRE_initWithNSString_(@"[A-Z]*");
  [r setMatchFlagsWithInt:OrgApacheRegexpRE_MATCH_CASEINDEPENDENT];
  if (![r matchWithNSString:@"CaBgDe12"]) {
    [self failWithNSString:@"Did not match 'CaBgDe12'."];
  }
  else {
    [self sayWithNSString:@"CaBgDe12 = true"];
    [self showParensWithOrgApacheRegexpRE:r];
  }
  r = new_OrgApacheRegexpRE_initWithNSString_(@"^abc$");
  if ([r matchWithNSString:@"\nabc"]) {
    [self failWithNSString:@"\"\\nabc\" matches \"^abc$\""];
  }
  r = new_OrgApacheRegexpRE_initWithNSString_withInt_(@"^abc$", OrgApacheRegexpRE_MATCH_MULTILINE);
  if (![r matchWithNSString:@"\nabc"]) {
    [self failWithNSString:@"\"\\nabc\" doesn't match \"^abc$\""];
  }
  if (![r matchWithNSString:@"\x0d""abc"]) {
    [self failWithNSString:@"\"\\rabc\" doesn't match \"^abc$\""];
  }
  if (![r matchWithNSString:@"\x0d\nabc"]) {
    [self failWithNSString:@"\"\\r\\nabc\" doesn't match \"^abc$\""];
  }
  if (![r matchWithNSString:@"\xc2\x85""abc"]) {
    [self failWithNSString:@"\"\\u0085abc\" doesn't match \"^abc$\""];
  }
  if (![r matchWithNSString:@"\u2028abc"]) {
    [self failWithNSString:@"\"\\u2028abc\" doesn't match \"^abc$\""];
  }
  if (![r matchWithNSString:@"\u2029abc"]) {
    [self failWithNSString:@"\"\\u2029abc\" doesn't match \"^abc$\""];
  }
  r = new_OrgApacheRegexpRE_initWithNSString_withInt_(@"^a.*b$", OrgApacheRegexpRE_MATCH_MULTILINE);
  if ([r matchWithNSString:@"a\nb"]) {
    [self failWithNSString:@"\"a\\nb\" matches \"^a.*b$\""];
  }
  if ([r matchWithNSString:@"a\x0d""b"]) {
    [self failWithNSString:@"\"a\\rb\" matches \"^a.*b$\""];
  }
  if ([r matchWithNSString:@"a\x0d\nb"]) {
    [self failWithNSString:@"\"a\\r\\nb\" matches \"^a.*b$\""];
  }
  if ([r matchWithNSString:@"a\xc2\x85""b"]) {
    [self failWithNSString:@"\"a\\u0085b\" matches \"^a.*b$\""];
  }
  if ([r matchWithNSString:@"a\u2028b"]) {
    [self failWithNSString:@"\"a\\u2028b\" matches \"^a.*b$\""];
  }
  if ([r matchWithNSString:@"a\u2029b"]) {
    [self failWithNSString:@"\"a\\u2029b\" matches \"^a.*b$\""];
  }
}

- (void)testPrecompiledRE {
  OrgApacheRegexpRETest_testPrecompiledRE(self);
}

- (void)testSplitAndGrep {
  OrgApacheRegexpRETest_testSplitAndGrep(self);
}

- (void)testSubst {
  OrgApacheRegexpRETest_testSubst(self);
}

- (void)assertEqualsWithNSString:(NSString *)message
                    withNSString:(NSString *)expected
                    withNSString:(NSString *)actual {
  if ((expected != nil && ![expected isEqual:actual]) || (actual != nil && ![actual isEqual:expected])) {
    [self failWithNSString:JreStrcat("$$$$$$", message, @" (expected \"", expected, @"\", actual \"", actual, @"\")")];
  }
}

- (void)assertEqualsWithNSString:(NSString *)message
                         withInt:(jint)expected
                         withInt:(jint)actual {
  if (expected != actual) {
    [self failWithNSString:JreStrcat("$$I$I$", message, @" (expected \"", expected, @"\", actual \"", actual, @"\")")];
  }
}

- (jboolean)getExpectedResultWithNSString:(NSString *)yesno {
  return OrgApacheRegexpRETest_getExpectedResultWithNSString_(self, yesno);
}

- (NSString *)findNextTestWithJavaIoBufferedReader:(JavaIoBufferedReader *)br {
  return OrgApacheRegexpRETest_findNextTestWithJavaIoBufferedReader_(self, br);
}

- (OrgApacheRegexpRETestCase *)getNextTestCaseWithJavaIoBufferedReader:(JavaIoBufferedReader *)br {
  return OrgApacheRegexpRETest_getNextTestCaseWithJavaIoBufferedReader_(self, br);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 17, 18, 19, -1, -1, -1 },
    { NULL, "LOrgApacheRegexpRETestCase;", 0x2, 20, 18, 19, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(mainWithNSStringArray:);
  methods[1].selector = @selector(testWithNSStringArray:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(runInteractiveTestsWithNSString:);
  methods[4].selector = @selector(dieWithNSString:);
  methods[5].selector = @selector(failWithJavaLangStringBuffer:withNSString:);
  methods[6].selector = @selector(failWithNSString:);
  methods[7].selector = @selector(sayWithNSString:);
  methods[8].selector = @selector(showParensWithOrgApacheRegexpRE:);
  methods[9].selector = @selector(runAutomatedTestsWithNSString:);
  methods[10].selector = @selector(testOther);
  methods[11].selector = @selector(testPrecompiledRE);
  methods[12].selector = @selector(testSplitAndGrep);
  methods[13].selector = @selector(testSubst);
  methods[14].selector = @selector(assertEqualsWithNSString:withNSString:withNSString:);
  methods[15].selector = @selector(assertEqualsWithNSString:withInt:withInt:);
  methods[16].selector = @selector(getExpectedResultWithNSString:);
  methods[17].selector = @selector(findNextTestWithJavaIoBufferedReader:);
  methods[18].selector = @selector(getNextTestCaseWithJavaIoBufferedReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "showSuccesses", "Z", .constantValue.asBOOL = OrgApacheRegexpRETest_showSuccesses, 0x18, -1, -1, -1, -1 },
    { "NEW_LINE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 21, -1, -1 },
    { "compiler_", "LOrgApacheRegexpREDebugCompiler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "testCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "failures_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "test", "LJavaLangException;", "runInteractiveTests", "LNSString;", "die", "fail", "LJavaLangStringBuffer;LNSString;", "say", "showParens", "LOrgApacheRegexpRE;", "runAutomatedTests", "assertEquals", "LNSString;LNSString;LNSString;", "LNSString;II", "getExpectedResult", "findNextTest", "LJavaIoBufferedReader;", "LJavaIoIOException;", "getNextTestCase", &OrgApacheRegexpRETest_NEW_LINE };
  static const J2ObjcClassInfo _OrgApacheRegexpRETest = { "RETest", "org.apache.regexp", ptrTable, methods, fields, 7, 0x1, 19, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpRETest;
}

+ (void)initialize {
  if (self == [OrgApacheRegexpRETest class]) {
    OrgApacheRegexpRETest_NEW_LINE = JavaLangSystem_getPropertyWithNSString_(@"line.separator");
    J2OBJC_SET_INITIALIZED(OrgApacheRegexpRETest)
  }
}

@end

void OrgApacheRegexpRETest_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheRegexpRETest_initialize();
  @try {
    if (!OrgApacheRegexpRETest_testWithNSStringArray_(args)) {
      JavaLangSystem_exitWithInt_(1);
    }
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    JavaLangSystem_exitWithInt_(1);
  }
}

jboolean OrgApacheRegexpRETest_testWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheRegexpRETest_initialize();
  OrgApacheRegexpRETest *test = new_OrgApacheRegexpRETest_init();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 2) {
    [test runInteractiveTestsWithNSString:IOSObjectArray_Get(args, 1)];
  }
  else if (args->size_ == 1) {
    [test runAutomatedTestsWithNSString:IOSObjectArray_Get(args, 0)];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: RETest ([-i] [regex]) ([/path/to/testfile.txt])"];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"By Default will run automated tests from file 'docs/RETest.txt' ..."];
    [JreLoadStatic(JavaLangSystem, out) println];
    [test runAutomatedTestsWithNSString:@"docs/RETest.txt"];
  }
  return test->failures_ == 0;
}

void OrgApacheRegexpRETest_init(OrgApacheRegexpRETest *self) {
  NSObject_init(self);
  self->compiler_ = new_OrgApacheRegexpREDebugCompiler_init();
  self->testCount_ = 0;
  self->failures_ = 0;
}

OrgApacheRegexpRETest *new_OrgApacheRegexpRETest_init() {
  J2OBJC_NEW_IMPL(OrgApacheRegexpRETest, init)
}

OrgApacheRegexpRETest *create_OrgApacheRegexpRETest_init() {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpRETest, init)
}

void OrgApacheRegexpRETest_testPrecompiledRE(OrgApacheRegexpRETest *self) {
  IOSCharArray *re1Instructions = [IOSCharArray newArrayWithChars:(jchar[]){ (jint) 0x007c, (jint) 0x0000, (jint) 0x001a, (jint) 0x007c, (jint) 0x0000, (jint) 0x000d, (jint) 0x0041, (jint) 0x0001, (jint) 0x0004, (jint) 0x0061, (jint) 0x007c, (jint) 0x0000, (jint) 0x0003, (jint) 0x0047, (jint) 0x0000, (jint) 0xfff6, (jint) 0x007c, (jint) 0x0000, (jint) 0x0003, (jint) 0x004e, (jint) 0x0000, (jint) 0x0003, (jint) 0x0041, (jint) 0x0001, (jint) 0x0004, (jint) 0x0062, (jint) 0x0045, (jint) 0x0000, (jint) 0x0000 } count:29];
  OrgApacheRegexpREProgram *re1 = new_OrgApacheRegexpREProgram_initWithCharArray_(re1Instructions);
  OrgApacheRegexpRE *r = new_OrgApacheRegexpRE_initWithOrgApacheRegexpREProgram_(re1);
  [self sayWithNSString:@"a*b"];
  jboolean result = [r matchWithNSString:@"aaab"];
  [self sayWithNSString:JreStrcat("$Z", @"aaab = ", result)];
  [self showParensWithOrgApacheRegexpRE:r];
  if (!result) {
    [self failWithNSString:@"\"aaab\" doesn't match to precompiled \"a*b\""];
  }
  result = [r matchWithNSString:@"b"];
  [self sayWithNSString:JreStrcat("$Z", @"b = ", result)];
  [self showParensWithOrgApacheRegexpRE:r];
  if (!result) {
    [self failWithNSString:@"\"b\" doesn't match to precompiled \"a*b\""];
  }
  result = [r matchWithNSString:@"c"];
  [self sayWithNSString:JreStrcat("$Z", @"c = ", result)];
  [self showParensWithOrgApacheRegexpRE:r];
  if (result) {
    [self failWithNSString:@"\"c\" matches to precompiled \"a*b\""];
  }
  result = [r matchWithNSString:@"ccccaaaaab"];
  [self sayWithNSString:JreStrcat("$Z", @"ccccaaaaab = ", result)];
  [self showParensWithOrgApacheRegexpRE:r];
  if (!result) {
    [self failWithNSString:@"\"ccccaaaaab\" doesn't match to precompiled \"a*b\""];
  }
}

void OrgApacheRegexpRETest_testSplitAndGrep(OrgApacheRegexpRETest *self) {
  IOSObjectArray *expected = [IOSObjectArray newArrayWithObjects:(id[]){ @"xxxx", @"xxxx", @"yyyy", @"zzz" } count:4 type:NSString_class_()];
  OrgApacheRegexpRE *r = new_OrgApacheRegexpRE_initWithNSString_(@"a*b");
  IOSObjectArray *s = [r splitWithNSString:@"xxxxaabxxxxbyyyyaaabzzz"];
  for (jint i = 0; i < expected->size_ && i < ((IOSObjectArray *) nil_chk(s))->size_; i++) {
    [self assertEqualsWithNSString:@"Wrong splitted part" withNSString:IOSObjectArray_Get(expected, i) withNSString:IOSObjectArray_Get(nil_chk(s), i)];
  }
  [self assertEqualsWithNSString:@"Wrong number of splitted parts" withInt:expected->size_ withInt:((IOSObjectArray *) nil_chk(s))->size_];
  r = new_OrgApacheRegexpRE_initWithNSString_(@"x+");
  expected = [IOSObjectArray newArrayWithObjects:(id[]){ @"xxxx", @"xxxx" } count:2 type:NSString_class_()];
  s = [r grepWithNSObjectArray:s];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(s))->size_; i++) {
    [self sayWithNSString:JreStrcat("$I$$", @"s[", i, @"] = ", IOSObjectArray_Get(s, i))];
    [self assertEqualsWithNSString:@"Grep fails" withNSString:IOSObjectArray_Get(expected, i) withNSString:IOSObjectArray_Get(s, i)];
  }
  [self assertEqualsWithNSString:@"Wrong number of string found by grep" withInt:expected->size_ withInt:s->size_];
}

void OrgApacheRegexpRETest_testSubst(OrgApacheRegexpRETest *self) {
  OrgApacheRegexpRE *r = new_OrgApacheRegexpRE_initWithNSString_(@"a*b");
  NSString *expected = @"-foo-garply-wacky-";
  NSString *actual = [r substWithNSString:@"aaaabfooaaabgarplyaaabwackyb" withNSString:@"-"];
  [self assertEqualsWithNSString:@"Wrong result of substitution in \"a*b\"" withNSString:expected withNSString:actual];
  r = new_OrgApacheRegexpRE_initWithNSString_(@"http://[\\.\\w\\-\\?/~_@&=%]+");
  actual = [r substWithNSString:@"visit us: http://www.apache.org!" withNSString:@"1234<a href=\"$0\">$0</a>" withInt:OrgApacheRegexpRE_REPLACE_BACKREFERENCES];
  [self assertEqualsWithNSString:@"Wrong subst() result" withNSString:@"visit us: 1234<a href=\"http://www.apache.org\">http://www.apache.org</a>!" withNSString:actual];
  r = new_OrgApacheRegexpRE_initWithNSString_(@"(.*?)=(.*)");
  actual = [r substWithNSString:@"variable=value" withNSString:@"$1_test_$212" withInt:OrgApacheRegexpRE_REPLACE_BACKREFERENCES];
  [self assertEqualsWithNSString:@"Wrong subst() result" withNSString:@"variable_test_value12" withNSString:actual];
  r = new_OrgApacheRegexpRE_initWithNSString_(@"^a$");
  actual = [r substWithNSString:@"a" withNSString:@"b" withInt:OrgApacheRegexpRE_REPLACE_BACKREFERENCES];
  [self assertEqualsWithNSString:@"Wrong subst() result" withNSString:@"b" withNSString:actual];
  r = new_OrgApacheRegexpRE_initWithNSString_withInt_(@"^a$", OrgApacheRegexpRE_MATCH_MULTILINE);
  actual = [r substWithNSString:@"\x0d\na\x0d\n" withNSString:@"b" withInt:OrgApacheRegexpRE_REPLACE_BACKREFERENCES];
  [self assertEqualsWithNSString:@"Wrong subst() result" withNSString:@"\x0d\nb\x0d\n" withNSString:actual];
  r = new_OrgApacheRegexpRE_initWithNSString_(@"fo(o)");
  actual = [r substWithNSString:@"foo" withNSString:@"$1" withInt:OrgApacheRegexpRE_REPLACE_BACKREFERENCES];
  [self assertEqualsWithNSString:@"Wrong subst() result" withNSString:@"o" withNSString:actual];
}

jboolean OrgApacheRegexpRETest_getExpectedResultWithNSString_(OrgApacheRegexpRETest *self, NSString *yesno) {
  if ([@"NO" isEqual:yesno]) {
    return false;
  }
  else if ([@"YES" isEqual:yesno]) {
    return true;
  }
  else {
    [self dieWithNSString:@"Test script error!"];
    return false;
  }
}

NSString *OrgApacheRegexpRETest_findNextTestWithJavaIoBufferedReader_(OrgApacheRegexpRETest *self, JavaIoBufferedReader *br) {
  NSString *number = @"";
  while ([((JavaIoBufferedReader *) nil_chk(br)) ready]) {
    number = [br readLine];
    if (number == nil) {
      break;
    }
    number = [number java_trim];
    if ([((NSString *) nil_chk(number)) java_hasPrefix:@"#"]) {
      break;
    }
    if (![number isEqual:@""]) {
      [self sayWithNSString:JreStrcat("$$", @"Script error.  Line = ", number)];
      JavaLangSystem_exitWithInt_(-1);
    }
  }
  return number;
}

OrgApacheRegexpRETestCase *OrgApacheRegexpRETest_getNextTestCaseWithJavaIoBufferedReader_(OrgApacheRegexpRETest *self, JavaIoBufferedReader *br) {
  NSString *tag = OrgApacheRegexpRETest_findNextTestWithJavaIoBufferedReader_(self, br);
  if (![((JavaIoBufferedReader *) nil_chk(br)) ready]) {
    return nil;
  }
  NSString *expr = [br readLine];
  NSString *matchAgainst = [br readLine];
  jboolean badPattern = [@"ERR" isEqual:matchAgainst];
  jboolean shouldMatch = false;
  jint expectedParenCount = 0;
  IOSObjectArray *expectedParens = nil;
  if (!badPattern) {
    shouldMatch = OrgApacheRegexpRETest_getExpectedResultWithNSString_(self, [((NSString *) nil_chk([br readLine])) java_trim]);
    if (shouldMatch) {
      expectedParenCount = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk([br readLine])) java_trim]);
      expectedParens = [IOSObjectArray newArrayWithLength:expectedParenCount type:NSString_class_()];
      for (jint i = 0; i < expectedParenCount; i++) {
        (void) IOSObjectArray_Set(expectedParens, i, [br readLine]);
      }
    }
  }
  return new_OrgApacheRegexpRETestCase_initWithOrgApacheRegexpRETest_withNSString_withNSString_withNSString_withBoolean_withBoolean_withNSStringArray_(self, tag, expr, matchAgainst, badPattern, shouldMatch, expectedParens);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpRETest)

@implementation OrgApacheRegexpRETestCase

- (instancetype)initWithOrgApacheRegexpRETest:(OrgApacheRegexpRETest *)test
                                 withNSString:(NSString *)tag
                                 withNSString:(NSString *)pattern
                                 withNSString:(NSString *)toMatch
                                  withBoolean:(jboolean)badPattern
                                  withBoolean:(jboolean)shouldMatch
                            withNSStringArray:(IOSObjectArray *)parens {
  OrgApacheRegexpRETestCase_initWithOrgApacheRegexpRETest_withNSString_withNSString_withNSString_withBoolean_withBoolean_withNSStringArray_(self, test, tag, pattern, toMatch, badPattern, shouldMatch, parens);
  return self;
}

- (void)runTest {
  [((OrgApacheRegexpRETest *) nil_chk(test_)) sayWithNSString:JreStrcat("$CI$$", tag_, '(', number_, @"): ", pattern_)];
  if ([self testCreation]) {
    OrgApacheRegexpRETestCase_testMatch(self);
  }
}

- (jboolean)testCreation {
  @try {
    regexp_ = new_OrgApacheRegexpRE_init();
    [regexp_ setProgramWithOrgApacheRegexpREProgram:[((OrgApacheRegexpREDebugCompiler *) nil_chk(((OrgApacheRegexpRETest *) nil_chk(test_))->compiler_)) compileWithNSString:pattern_]];
    if (badPattern_) {
      [test_ failWithJavaLangStringBuffer:log_ withNSString:@"Was expected to be an error, but wasn't."];
      return false;
    }
    return true;
  }
  @catch (JavaLangException *e) {
    if (badPattern_) {
      (void) [((JavaLangStringBuffer *) nil_chk(log_)) appendWithNSString:@"   Match: ERR\n"];
      [self successWithNSString:JreStrcat("$$$", @"Produces an error (", [e description], @"), as expected.")];
      return false;
    }
    NSString *message = ([e getMessage] == nil) ? [e description] : [e getMessage];
    [((OrgApacheRegexpRETest *) nil_chk(test_)) failWithJavaLangStringBuffer:log_ withNSString:JreStrcat("$$C", @"Produces an unexpected exception \"", message, '"')];
    [e printStackTrace];
  }
  @catch (JavaLangError *e) {
    [((OrgApacheRegexpRETest *) nil_chk(test_)) failWithJavaLangStringBuffer:log_ withNSString:JreStrcat("$$C", @"Compiler threw fatal error \"", [e getMessage], '"')];
    [e printStackTrace];
  }
  return false;
}

- (void)testMatch {
  OrgApacheRegexpRETestCase_testMatch(self);
}

- (jboolean)checkResultWithBoolean:(jboolean)result {
  return OrgApacheRegexpRETestCase_checkResultWithBoolean_(self, result);
}

- (jboolean)checkParens {
  return OrgApacheRegexpRETestCase_checkParens(self);
}

- (jboolean)tryMatchUsingCIWithOrgApacheRegexpCharacterIterator:(id<OrgApacheRegexpCharacterIterator>)matchAgainst {
  @try {
    jboolean result = [((OrgApacheRegexpRE *) nil_chk(regexp_)) matchWithOrgApacheRegexpCharacterIterator:matchAgainst withInt:0];
    (void) [((JavaLangStringBuffer *) nil_chk(log_)) appendWithNSString:JreStrcat("$$C", @"   Match: ", (result ? @"YES" : @"NO"), 0x000a)];
    return OrgApacheRegexpRETestCase_checkResultWithBoolean_(self, result) && (!shouldMatch_ || OrgApacheRegexpRETestCase_checkParens(self));
  }
  @catch (JavaLangException *e) {
    [((OrgApacheRegexpRETest *) nil_chk(test_)) failWithJavaLangStringBuffer:log_ withNSString:JreStrcat("$$", @"Matcher threw exception: ", [e description])];
    [e printStackTrace];
  }
  @catch (JavaLangError *e) {
    [((OrgApacheRegexpRETest *) nil_chk(test_)) failWithJavaLangStringBuffer:log_ withNSString:JreStrcat("$$C", @"Matcher threw fatal error \"", [e getMessage], '"')];
    [e printStackTrace];
  }
  return false;
}

- (jboolean)assertEqualsWithJavaLangStringBuffer:(JavaLangStringBuffer *)log
                                    withNSString:(NSString *)message
                                    withNSString:(NSString *)expected
                                    withNSString:(NSString *)actual {
  if ((expected != nil && ![expected isEqual:actual]) || (actual != nil && ![actual isEqual:expected])) {
    [((OrgApacheRegexpRETest *) nil_chk(test_)) failWithJavaLangStringBuffer:log withNSString:JreStrcat("$$$$$$", message, @" (expected \"", expected, @"\", actual \"", actual, @"\")")];
    return false;
  }
  return true;
}

- (jboolean)assertEqualsWithJavaLangStringBuffer:(JavaLangStringBuffer *)log
                                    withNSString:(NSString *)message
                                         withInt:(jint)expected
                                         withInt:(jint)actual {
  if (expected != actual) {
    [((OrgApacheRegexpRETest *) nil_chk(test_)) failWithJavaLangStringBuffer:log withNSString:JreStrcat("$$I$I$", message, @" (expected \"", expected, @"\", actual \"", actual, @"\")")];
    return false;
  }
  return true;
}

- (void)successWithNSString:(NSString *)s {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheRegexpRETest:withNSString:withNSString:withNSString:withBoolean:withBoolean:withNSStringArray:);
  methods[1].selector = @selector(runTest);
  methods[2].selector = @selector(testCreation);
  methods[3].selector = @selector(testMatch);
  methods[4].selector = @selector(checkResultWithBoolean:);
  methods[5].selector = @selector(checkParens);
  methods[6].selector = @selector(tryMatchUsingCIWithOrgApacheRegexpCharacterIterator:);
  methods[7].selector = @selector(assertEqualsWithJavaLangStringBuffer:withNSString:withNSString:withNSString:);
  methods[8].selector = @selector(assertEqualsWithJavaLangStringBuffer:withNSString:withInt:withInt:);
  methods[9].selector = @selector(successWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "log_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "number_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tag_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "toMatch_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "badPattern_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "shouldMatch_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parens_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "test_", "LOrgApacheRegexpRETest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "regexp_", "LOrgApacheRegexpRE;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheRegexpRETest;LNSString;LNSString;LNSString;ZZ[LNSString;", "checkResult", "Z", "tryMatchUsingCI", "LOrgApacheRegexpCharacterIterator;", "assertEquals", "LJavaLangStringBuffer;LNSString;LNSString;LNSString;", "LJavaLangStringBuffer;LNSString;II", "success", "LNSString;" };
  static const J2ObjcClassInfo _OrgApacheRegexpRETestCase = { "RETestCase", "org.apache.regexp", ptrTable, methods, fields, 7, 0x10, 10, 10, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpRETestCase;
}

@end

void OrgApacheRegexpRETestCase_initWithOrgApacheRegexpRETest_withNSString_withNSString_withNSString_withBoolean_withBoolean_withNSStringArray_(OrgApacheRegexpRETestCase *self, OrgApacheRegexpRETest *test, NSString *tag, NSString *pattern, NSString *toMatch, jboolean badPattern, jboolean shouldMatch, IOSObjectArray *parens) {
  NSObject_init(self);
  self->log_ = new_JavaLangStringBuffer_init();
  self->number_ = ++((OrgApacheRegexpRETest *) nil_chk(test))->testCount_;
  self->test_ = test;
  self->tag_ = tag;
  self->pattern_ = pattern;
  self->toMatch_ = toMatch;
  self->badPattern_ = badPattern;
  self->shouldMatch_ = shouldMatch;
  if (parens != nil) {
    self->parens_ = [IOSObjectArray newArrayWithLength:parens->size_ type:NSString_class_()];
    for (jint i = 0; i < parens->size_; i++) {
      (void) IOSObjectArray_Set(self->parens_, i, IOSObjectArray_Get(parens, i));
    }
  }
  else {
    self->parens_ = nil;
  }
}

OrgApacheRegexpRETestCase *new_OrgApacheRegexpRETestCase_initWithOrgApacheRegexpRETest_withNSString_withNSString_withNSString_withBoolean_withBoolean_withNSStringArray_(OrgApacheRegexpRETest *test, NSString *tag, NSString *pattern, NSString *toMatch, jboolean badPattern, jboolean shouldMatch, IOSObjectArray *parens) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpRETestCase, initWithOrgApacheRegexpRETest_withNSString_withNSString_withNSString_withBoolean_withBoolean_withNSStringArray_, test, tag, pattern, toMatch, badPattern, shouldMatch, parens)
}

OrgApacheRegexpRETestCase *create_OrgApacheRegexpRETestCase_initWithOrgApacheRegexpRETest_withNSString_withNSString_withNSString_withBoolean_withBoolean_withNSStringArray_(OrgApacheRegexpRETest *test, NSString *tag, NSString *pattern, NSString *toMatch, jboolean badPattern, jboolean shouldMatch, IOSObjectArray *parens) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpRETestCase, initWithOrgApacheRegexpRETest_withNSString_withNSString_withNSString_withBoolean_withBoolean_withNSStringArray_, test, tag, pattern, toMatch, badPattern, shouldMatch, parens)
}

void OrgApacheRegexpRETestCase_testMatch(OrgApacheRegexpRETestCase *self) {
  (void) [((JavaLangStringBuffer *) nil_chk(self->log_)) appendWithNSString:JreStrcat("$$$", @"   Match against: '", self->toMatch_, @"'\n")];
  @try {
    jboolean result = [((OrgApacheRegexpRE *) nil_chk(self->regexp_)) matchWithNSString:self->toMatch_];
    (void) [self->log_ appendWithNSString:JreStrcat("$$C", @"   Matched: ", (result ? @"YES" : @"NO"), 0x000a)];
    if (OrgApacheRegexpRETestCase_checkResultWithBoolean_(self, result) && (!self->shouldMatch_ || OrgApacheRegexpRETestCase_checkParens(self))) {
      (void) [self->log_ appendWithNSString:@"   Match using StringCharacterIterator\n"];
      if (![self tryMatchUsingCIWithOrgApacheRegexpCharacterIterator:new_OrgApacheRegexpStringCharacterIterator_initWithNSString_(self->toMatch_)]) return;
      (void) [self->log_ appendWithNSString:@"   Match using CharacterArrayCharacterIterator\n"];
      if (![self tryMatchUsingCIWithOrgApacheRegexpCharacterIterator:new_OrgApacheRegexpCharacterArrayCharacterIterator_initWithCharArray_withInt_withInt_([((NSString *) nil_chk(self->toMatch_)) java_toCharArray], 0, [self->toMatch_ java_length])]) return;
      (void) [self->log_ appendWithNSString:@"   Match using StreamCharacterIterator\n"];
      if (![self tryMatchUsingCIWithOrgApacheRegexpCharacterIterator:new_OrgApacheRegexpStreamCharacterIterator_initWithJavaIoInputStream_(new_JavaIoStringBufferInputStream_initWithNSString_(self->toMatch_))]) return;
      (void) [self->log_ appendWithNSString:@"   Match using ReaderCharacterIterator\n"];
      if (![self tryMatchUsingCIWithOrgApacheRegexpCharacterIterator:new_OrgApacheRegexpReaderCharacterIterator_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(self->toMatch_))]) return;
    }
  }
  @catch (JavaLangException *e) {
    [((OrgApacheRegexpRETest *) nil_chk(self->test_)) failWithJavaLangStringBuffer:self->log_ withNSString:JreStrcat("$$", @"Matcher threw exception: ", [e description])];
    [e printStackTrace];
  }
  @catch (JavaLangError *e) {
    [((OrgApacheRegexpRETest *) nil_chk(self->test_)) failWithJavaLangStringBuffer:self->log_ withNSString:JreStrcat("$$C", @"Matcher threw fatal error \"", [e getMessage], '"')];
    [e printStackTrace];
  }
}

jboolean OrgApacheRegexpRETestCase_checkResultWithBoolean_(OrgApacheRegexpRETestCase *self, jboolean result) {
  if (result == self->shouldMatch_) {
    [self successWithNSString:JreStrcat("$$$$", (self->shouldMatch_ ? @"Matched" : @"Did not match"), @" \"", self->toMatch_, @"\", as expected:")];
    return true;
  }
  else {
    if (self->shouldMatch_) {
      [((OrgApacheRegexpRETest *) nil_chk(self->test_)) failWithJavaLangStringBuffer:self->log_ withNSString:JreStrcat("$$$", @"Did not match \"", self->toMatch_, @"\", when expected to.")];
    }
    else {
      [((OrgApacheRegexpRETest *) nil_chk(self->test_)) failWithJavaLangStringBuffer:self->log_ withNSString:JreStrcat("$$$", @"Matched \"", self->toMatch_, @"\", when not expected to.")];
    }
    return false;
  }
}

jboolean OrgApacheRegexpRETestCase_checkParens(OrgApacheRegexpRETestCase *self) {
  (void) [((JavaLangStringBuffer *) nil_chk(self->log_)) appendWithNSString:JreStrcat("$IC", @"   Paren count: ", [((OrgApacheRegexpRE *) nil_chk(self->regexp_)) getParenCount], 0x000a)];
  if (![self assertEqualsWithJavaLangStringBuffer:self->log_ withNSString:@"Wrong number of parens" withInt:((IOSObjectArray *) nil_chk(self->parens_))->size_ withInt:[((OrgApacheRegexpRE *) nil_chk(self->regexp_)) getParenCount]]) {
    return false;
  }
  for (jint p = 0; p < [((OrgApacheRegexpRE *) nil_chk(self->regexp_)) getParenCount]; p++) {
    (void) [self->log_ appendWithNSString:JreStrcat("$I$$C", @"   Paren ", p, @": ", [((OrgApacheRegexpRE *) nil_chk(self->regexp_)) getParenWithInt:p], 0x000a)];
    if ([@"null" isEqual:IOSObjectArray_Get(self->parens_, p)] && [((OrgApacheRegexpRE *) nil_chk(self->regexp_)) getParenWithInt:p] == nil) {
      continue;
    }
    if (![self assertEqualsWithJavaLangStringBuffer:self->log_ withNSString:JreStrcat("$I", @"Wrong register ", p) withNSString:IOSObjectArray_Get(self->parens_, p) withNSString:[((OrgApacheRegexpRE *) nil_chk(self->regexp_)) getParenWithInt:p]]) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpRETestCase)
