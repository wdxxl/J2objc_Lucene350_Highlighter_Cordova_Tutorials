//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350_highlighter.jar!org/apache/regexp/ReaderCharacterIterator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "org/apache/regexp/ReaderCharacterIterator.h"

@interface OrgApacheRegexpReaderCharacterIterator () {
 @public
  JavaIoReader *reader_;
  JavaLangStringBuffer *buff_;
  jboolean closed_;
}

- (jint)readWithInt:(jint)n;

- (void)readAll;

- (void)ensureWithInt:(jint)idx;

@end

J2OBJC_FIELD_SETTER(OrgApacheRegexpReaderCharacterIterator, reader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(OrgApacheRegexpReaderCharacterIterator, buff_, JavaLangStringBuffer *)

__attribute__((unused)) static jint OrgApacheRegexpReaderCharacterIterator_readWithInt_(OrgApacheRegexpReaderCharacterIterator *self, jint n);

__attribute__((unused)) static void OrgApacheRegexpReaderCharacterIterator_readAll(OrgApacheRegexpReaderCharacterIterator *self);

__attribute__((unused)) static void OrgApacheRegexpReaderCharacterIterator_ensureWithInt_(OrgApacheRegexpReaderCharacterIterator *self, jint idx);

@implementation OrgApacheRegexpReaderCharacterIterator

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  OrgApacheRegexpReaderCharacterIterator_initWithJavaIoReader_(self, reader);
  return self;
}

- (NSString *)substringWithInt:(jint)beginIndex
                       withInt:(jint)endIndex {
  @try {
    OrgApacheRegexpReaderCharacterIterator_ensureWithInt_(self, endIndex);
    return [((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(buff_)) description])) java_substring:beginIndex endIndex:endIndex];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
  }
}

- (NSString *)substringWithInt:(jint)beginIndex {
  @try {
    OrgApacheRegexpReaderCharacterIterator_readAll(self);
    return [((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(buff_)) description])) java_substring:beginIndex];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
  }
}

- (jchar)charAtWithInt:(jint)pos {
  @try {
    OrgApacheRegexpReaderCharacterIterator_ensureWithInt_(self, pos);
    return [((JavaLangStringBuffer *) nil_chk(buff_)) charAtWithInt:pos];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
  }
}

- (jboolean)isEndWithInt:(jint)pos {
  if ([((JavaLangStringBuffer *) nil_chk(buff_)) java_length] > pos) {
    return false;
  }
  else {
    @try {
      OrgApacheRegexpReaderCharacterIterator_ensureWithInt_(self, pos);
      return ([buff_ java_length] <= pos);
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangStringIndexOutOfBoundsException_initWithNSString_([e getMessage]);
    }
  }
}

- (jint)readWithInt:(jint)n {
  return OrgApacheRegexpReaderCharacterIterator_readWithInt_(self, n);
}

- (void)readAll {
  OrgApacheRegexpReaderCharacterIterator_readAll(self);
}

- (void)ensureWithInt:(jint)idx {
  OrgApacheRegexpReaderCharacterIterator_ensureWithInt_(self, idx);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 3, 7, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 3, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(substringWithInt:withInt:);
  methods[2].selector = @selector(substringWithInt:);
  methods[3].selector = @selector(charAtWithInt:);
  methods[4].selector = @selector(isEndWithInt:);
  methods[5].selector = @selector(readWithInt:);
  methods[6].selector = @selector(readAll);
  methods[7].selector = @selector(ensureWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buff_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "substring", "II", "I", "charAt", "isEnd", "read", "LJavaIoIOException;", "ensure" };
  static const J2ObjcClassInfo _OrgApacheRegexpReaderCharacterIterator = { "ReaderCharacterIterator", "org.apache.regexp", ptrTable, methods, fields, 7, 0x11, 8, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheRegexpReaderCharacterIterator;
}

@end

void OrgApacheRegexpReaderCharacterIterator_initWithJavaIoReader_(OrgApacheRegexpReaderCharacterIterator *self, JavaIoReader *reader) {
  NSObject_init(self);
  self->reader_ = reader;
  self->buff_ = new_JavaLangStringBuffer_initWithInt_(512);
  self->closed_ = false;
}

OrgApacheRegexpReaderCharacterIterator *new_OrgApacheRegexpReaderCharacterIterator_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(OrgApacheRegexpReaderCharacterIterator, initWithJavaIoReader_, reader)
}

OrgApacheRegexpReaderCharacterIterator *create_OrgApacheRegexpReaderCharacterIterator_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(OrgApacheRegexpReaderCharacterIterator, initWithJavaIoReader_, reader)
}

jint OrgApacheRegexpReaderCharacterIterator_readWithInt_(OrgApacheRegexpReaderCharacterIterator *self, jint n) {
  if (self->closed_) {
    return 0;
  }
  IOSCharArray *c = [IOSCharArray newArrayWithLength:n];
  jint count = 0;
  jint read = 0;
  do {
    read = [((JavaIoReader *) nil_chk(self->reader_)) readWithCharArray:c];
    if (read < 0) {
      self->closed_ = true;
      break;
    }
    count += read;
    (void) [((JavaLangStringBuffer *) nil_chk(self->buff_)) appendWithCharArray:c withInt:0 withInt:read];
  }
  while (count < n);
  return count;
}

void OrgApacheRegexpReaderCharacterIterator_readAll(OrgApacheRegexpReaderCharacterIterator *self) {
  while (!self->closed_) {
    OrgApacheRegexpReaderCharacterIterator_readWithInt_(self, 1000);
  }
}

void OrgApacheRegexpReaderCharacterIterator_ensureWithInt_(OrgApacheRegexpReaderCharacterIterator *self, jint idx) {
  if (self->closed_) {
    return;
  }
  if (idx < [((JavaLangStringBuffer *) nil_chk(self->buff_)) java_length]) {
    return;
  }
  OrgApacheRegexpReaderCharacterIterator_readWithInt_(self, idx + 1 - [self->buff_ java_length]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheRegexpReaderCharacterIterator)
